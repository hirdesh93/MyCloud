public with sharing class AmazonTypes {

    
    public class GetNextToken {

        public CC_XmlDom response;
         
        public String nextToken {get; set;}
        
        public GetNextToken(CC_XmlDom r) {
            System.Debug('***response**'+response); 
            response=r;
            parseResponse();
        }
        
        public void parseResponse() {
           CC_XmlNode nt = response.root.GetElementByTagName('NextToken'); 
            if(nt!=null) nextToken = nt.nodeValue;
        }
    }

    public class ReportListResponse {
        
        public Id amazonSettingId;
        public CC_XmlDom response; 
        
        public List<eCommazon__Amazon_Report__c> reports {get; set;} 
        
        //public String nextToken {get; set;}
        
        public ReportListResponse(CC_XmlDom r, Id asid) {
            system.debug(asid);
            amazonSettingId = asid;
            response = r;
            parseResponse();
        }
        
        public void parseResponse() {
            reports = new List<eCommazon__Amazon_Report__c>();
            //CC_XmlNode nt = response.root.GetElementByTagName('NextToken');
            //if(nt!=null) nextToken = nt.nodeValue;
           Amazon_Setting__c  amzsettingCA = [SELECT Merchant_ID__c,eCommazon__Request_Report_IDs__c, eCommazon__Amazon_Site__c
                                    FROM Amazon_Setting__c
                                    Where Enabled__c=true AND eCommazon__Amazon_Site__c = 'CA' limit 1];
                                    
            for(CC_XmlNode r : response.root.GetElementsByTagName('ReportRequestInfo')) {
           

                if(r.getElementByTagName('ReportProcessingStatus')!=null && '_DONE_'.equals(r.getElementByTagName('ReportProcessingStatus').nodeValue) ) {
                    eCommazon__Amazon_Report__c ar = new eCommazon__Amazon_Report__c();
                    ar.Name = r.getElementByTagName('ReportType').nodeValue;
                   if(r.getElementByTagName('CompletedDate') != null)
                    ar.eCommazon__Completed_Date__c = AmazonUtils.getDate(r.getElementByTagName('CompletedDate').nodeValue.replace('T',' '));
                   else
                    ar.eCommazon__Completed_Date__c = null; 
                    
                   if(r.getElementByTagName('StartDate') != null)
                    ar.eCommazon__Start_Date__c = AmazonUtils.getDate(r.getElementByTagName('StartDate').nodeValue.replace('T',' '));
                   else
                    ar.eCommazon__Start_Date__c = null;
                     
                   if(r.getElementByTagName('EndDate') != null)
                    ar.eCommazon__End_Date__c = AmazonUtils.getDate(r.getElementByTagName('EndDate').nodeValue.replace('T',' '));
                   else
                    ar.eCommazon__End_Date__c = null;
                    
                    ar.eCommazon__Report_Id__c = r.getElementByTagName('GeneratedReportId').nodeValue;
                    
                    if(amzsettingCA != null && (amzsettingCA.Id == amazonSettingId)){
                    if(amzsettingCA.eCommazon__Request_Report_IDs__c != null && amzsettingCA.eCommazon__Request_Report_IDs__c != ''){ 
                    if(amzsettingCA.eCommazon__Request_Report_IDs__c.contains(r.getElementByTagName('ReportRequestId').nodeValue)){
                       system.debug(amzsettingCA.Id);
                       ar.Amazon_Setting__c = amzsettingCA.id;
                      
                       }
                       }
                       }
                       else{ 
                       system.debug(amazonSettingId);
                       ar.Amazon_Setting__c = amazonSettingId;
                    }
                    reports.add(ar);
                }
                if(amzsettingCA != null && (amzsettingCA.Id == amazonSettingId)){
                if(amzsettingCA.eCommazon__Request_Report_IDs__c != null && amzsettingCA.eCommazon__Request_Report_IDs__c != ''){
                string s1=amzsettingCA.eCommazon__Request_Report_IDs__c;
                if(amzsettingCA.eCommazon__Request_Report_IDs__c.contains(','+r.getElementByTagName('ReportRequestId').nodeValue)){
                    string s2=s1.remove(','+r.getElementByTagName('ReportRequestId').nodeValue);
                    amzsettingCA.eCommazon__Request_Report_IDs__c = s2;
                }else if(amzsettingCA.eCommazon__Request_Report_IDs__c.contains(r.getElementByTagName('ReportRequestId').nodeValue)){
                    string s2=s1.remove(r.getElementByTagName('ReportRequestId').nodeValue);
                    amzsettingCA.eCommazon__Request_Report_IDs__c = s2;
                }
                }
                } 
            }
            if(reports!=null && reports.size()>0) Database.upsert(reports, eCommazon__Amazon_Report__c.eCommazon__Report_Id__c , false);
            if(amzsettingCA != null && (amzsettingCA.Id == amazonSettingId)){
                update amzsettingCA;
                }
            }
    }

    public static Contact setAddress(Contact con, CC_XmlNode shipping) {
        con.MailingStreet = '';

        if (shipping.getElementByTagName('AddressLine1') != null) {
            con.MailingStreet += shipping.getElementByTagName('AddressLine1').nodeValue;
            if (shipping.getElementByTagName('AddressLine2') != null) {
                con.MailingStreet += '\n';
                con.MailingStreet += shipping.getElementByTagName('AddressLine2').nodeValue;
            }
            if (shipping.getElementByTagName('AddressLine3') != null) {
                con.MailingStreet += '\n';
                con.MailingStreet += shipping.getElementByTagName('AddressLine3').nodeValue;
            }
        }

        con.MailingCity = shipping.getElementByTagName('City').nodeValue;
        if (con.MailingCity.length() > 40) {
            con.MailingCity = con.MailingCity.substring(0, 40);
        }

        con.MailingCountry = shipping.getElementByTagName('CountryCode').nodeValue;

        if (shipping.getElementByTagName('Phone') != null) {
            con.Phone = shipping.getElementByTagName('Phone').nodeValue;
        }

        if (shipping.getElementByTagName('StateOrRegion') != null) {
            con.MailingState = shipping.getElementByTagName('StateOrRegion').nodeValue;
            if (con.MailingState != null && con.MailingState.length() > 20) {
                con.MailingState = con.MailingState.substring(0, 20);
            }
        }

        if (shipping.getElementByTagName('PostalCode') != null) {
            con.MailingPostalCode = shipping.getElementByTagName('PostalCode').nodeValue;
        }

        return con;
    }

    // Given a CC_XmlNode containing the response to a request to Amazon to ListOrders,
    // parses that response and updates the Contacts, Addresses, Orders, and Shipping Details db.
    public class GetOrdersResponse {
        
        public String nextToken;
        public Boolean throttled;
        
        public CC_XmlNode getOrdersResponse; 
        //CC_XmlDom orderItemsResponse;
        public Id accountId {get; set;}

        public Map<String, Contact> customers;
        //public Map<String, ECS__Product__c> products;
        public Map<String, ECS__Address__c> addresses;
        public Map<String, ECS__eCommSource_Order__c> orderList; 
        //public Map<String, ECS__eCommSource_Order_Line__c> orderLines;    
        public Map<String, ECS__Shipping_Detail__c> shippingDetails;
        //public Map<String, ECS__Products_Purchased__c> purchasedProducts;
                        
        public GetOrdersResponse(CC_XmlNode o /*, CC_XmlDom items*/) { 
            throttled = false;
            if(o!=null) getOrdersResponse = o;
            //orderItemsResponse = items;
            //parseListOrdersResponse();
        }

        public void parseListOrdersResponse() {
            Database.DMLOptions dmo = new Database.DMLOptions();
            dmo.allowFieldTruncation = true;
            
            Boolean lockOrdersAfterImport = AmazonUtils.lockOrdersAfterImport();
            
            DateTime syncOrdersAfter = AmazonUtils.syncOrdersAfter();
            
            Amazon_Setting__c aset;
            List<Amazon_Setting__c> amazonSettings = [Select Id, Order_Setting__c From Amazon_Setting__c Where Enabled__c=true];
            if(amazonSettings.size()==1) aset = amazonSettings[0];
                                
            try {
                customers = new Map<String, Contact>();
                orderList = new Map<String, ECS__eCommSource_Order__c>();
                addresses = new Map<String, ECS__Address__c>();
                shippingDetails = new Map<String, ECS__Shipping_Detail__c>();
                //List<String> ordersToDelete = new List<String>(); // Any cancelled orders. How should these be handled?
                List<String> customerExternalIds = new List<String>();
                List<Contact> customersToUpdate = new List<Contact>();
                if(getOrdersResponse!=null) {
                    if(getOrdersResponse.root.GetElementByTagName('NextToken')!=null) {
                       nextToken = getOrdersResponse.root.GetElementByTagName('NextToken').nodeValue;
                    }
                    Set<String> addressIds = new Set<String>();
                    CC_XmlNode orderArray = getOrdersResponse.root.GetElementByTagName('Orders');
                    if(orderArray!=null) {
                        List<CC_XmlNode> orders = orderArray.GetElementsByTagName('Order');
                        Integer i = 0;
                        //Map<Integer, CC_XmlNode> addressNodeMap = new Map<Integer, CC_XmlNode>();
                        
                        //Map<String, Contact> existingContactMap = new Map<String, Contact>();
                        
                        //Map<Integer, String> phoneMap = new Map<Integer, String>();
                        //Map<Integer, String> nameMap = new Map<Integer, String>();
                        
                        //Map<Integer, String> contactIdToIntMap = new Map<Integer, String>();
                        //Map<Integer, String> addrIdToIntMap = new Map<Integer, String>();
                        
                        Map<String,String> orderNumberEmailMap = new Map<String,String>();
                        for(CC_XmlNode o : orders) {
                            if(o!=null) {
                                String thisOrderId = AmazonUtils.getOrderId(o);
                                String buyerEmail = AmazonUtils.getBuyerEmail(o);
                                System.debug('buyerEmail='+buyerEmail);
                                if(buyerEmail!=null && buyerEmail!='') orderNumberEmailMap.put(thisOrderId, buyerEmail);
                            }
                        }
                        
                        Map<String, ECS__eCommSource_Order__c> existingOrders = new Map<String, ECS__eCommSource_Order__c>();
                        if(lockOrdersAfterImport) {
                            for(ECS__eCommSource_Order__c o : [Select Id, ECS__External_Order_Id__c
                                                               From ECS__eCommSource_Order__c
                                                               Where ECS__External_Order_Id__c IN:orderNumberEmailMap.keySet() AND 
                                                                     ECS__Order_Status__c!='Pending' AND 
                                                                     ECS__Shipping_Detail__r.ECS__Shipping_Address__c!=null AND 
                                                                     ECS__Order_Line_Total__c>0]) {
                                existingOrders.put(o.ECS__External_Order_Id__c, o);
                            }
                        }
                        
                        Map<String,Contact> existingCustomers = new Map<String,Contact>();
                        for(Contact c : [Select Id, ECS__Customer_External_Id__c From Contact Where ECS__Customer_External_Id__c IN:orderNumberEmailMap.values()]) { // search based on the email address
                            if(!existingCustomers.containsKey(c.ECS__Customer_External_Id__c)) existingCustomers.put(c.ECS__Customer_External_Id__c, c);
                        }
                        
                        Map<String,Contact> pendingCustomers = new Map<String,Contact>();
                        for(Contact c : [Select Id, ECS__Customer_External_Id__c From Contact Where ECS__Customer_External_Id__c IN:orderNumberEmailMap.keySet()]) { // search based on the order number
                            if(!pendingCustomers.containsKey(c.Id)) {
                                String emailAddress = orderNumberEmailMap.get(c.ECS__Customer_External_Id__c); // get the email address of the customer
                                if(!existingCustomers.containsKey(emailAddress)) {
                                    c.Email = c.ECS__Customer_External_Id__c = emailAddress;
                                    pendingCustomers.put(c.Id, c);
                                }
                            }
                        }
                        
                        if(pendingCustomers.size()>0) update pendingCustomers.values(); 
                         
                        Set<String> CancelledOrderIds = New Set<String>();   
                        for(CC_XmlNode o : orders) {
                            //System.debug(LoggingLevel.WARN, 'i is equal to:' + i);
                            if(o!=null) {
                                String thisOrderId = AmazonUtils.getOrderId(o);
                                                                
                                String orderStatus = AmazonUtils.getOrderStatus(o);
                                if(!'Canceled'.equals(orderStatus)) {
                                
                                   Contact customer = new Contact();

                                    Contact shippingContact;
                                        
                                   String buyerEmail = AmazonUtils.getBuyerEmail(o);
                                   System.debug('buyerEmail='+buyerEmail);
                                   if(buyerEmail==null || buyerEmail=='') buyerEmail = thisOrderId; 
                                   else customer.Email = buyerEmail;
                                   customer.ECS__Customer_External_Id__c = buyerEmail;
                                   //customer.ECS__Customer_External_Id__c = customer.ECS__Customer_External_Id__c.substring(0, Math.min(customer.ECS__Customer_External_Id__c.length(), 50));
                                   customer.AccountId = accountId;
                                   //customer.LeadSource = 'Web';
                                   customer.HasOptedOutOfEmail = true;

                                    String buyerName;
                                    if(o.getElementByTagName('BuyerName')!=null) buyerName = o.getElementByTagName('BuyerName').nodeValue;

                                    Name buyerNames = new Name(buyerName);
                                    
                                        CC_XmlNode shipping = o.getElementByTagName('ShippingAddress');
                                        if(shipping!=null) {
                                            String addressId = thisOrderId; //AmazonUtils.getAddrId(o);
                                            if(addressId!=null && addressId!='' && !addressIds.contains(addressId)) addressIds.add(addressId);
                                            String name = '';

                                            CC_XmlNode nameNode;
                                            if ((nameNode = shipping.getElementByTagName('Name')) != null) {
                                                name = nameNode.nodeValue;
                                            }

                                            if(buyerNames.salutation!=null) customer.Salutation = buyerNames.salutation;
                                            if(buyerNames.firstName!=null) customer.firstName = buyerNames.firstName;
                                            customer.LastName = buyerNames.lastName;

                                            // Check BuyerName versus Shipping Address Name
                                            if(buyerName!=null && !buyerName.equals(name)) {
                                                shippingContact = new Contact();
                                                shippingContact.AccountId = accountId;
                                                shippingContact.HasOptedOutOfEmail = true;

                                                Name shipToNames = new Name(name);
                                                shippingContact.ECS__Customer_External_Id__c = 'shiptocustomer-'+thisOrderId+'@notavailable.com';
                                                if(shipToNames.salutation!=null) shippingContact.Salutation = shipToNames.salutation;
                                                if(shipToNames.firstName!=null) shippingContact.firstName = shipToNames.firstName;
                                                shippingContact.LastName = shipToNames.lastName;
                                            }

                                            if(!lockOrdersAfterImport || !existingOrders.containsKey(thisOrderId)) {
                                                if(shippingContact!=null) shippingContact = setAddress(shippingContact, shipping);
                                                else customer = setAddress(customer, shipping);
                                            }

                                            customers.put(customer.ECS__Customer_External_Id__c, customer);

                                            if(shippingContact!=null) customers.put(shippingContact.ECS__Customer_External_Id__c, shippingContact);
                                            
                                        } else if(customer.ECS__Customer_External_Id__c!=thisOrderId && o.getElementByTagName('BuyerName')!=null) {
                                            customer.FirstName = buyerNames.firstName;
                                            customer.LastName = buyerNames.lastName;
                                            customers.put(customer.ECS__Customer_External_Id__c, customer);
                                        } else {
                                            System.debug('XYZ');
                                            //Datetime thisDatetime = Datetime.now();
                                            //String thisTimeString = thisDatetime.formatGmt('yyyy-MM-dd HH:mm:ss ');
                                            //thisTimeString = thisTimeString.replaceFirst(' ', 'T');
                                            //thisTimeString = thisTimeString.replace(' ', 'Z');
                                            //thisTimeString += 'dummycontact';
                                            customer.FirstName = thisOrderId;
                                            customer.LastName = 'Pending Contact';
                                            customers.put(customer.ECS__Customer_External_Id__c, customer);
                                        }
    
                                        //System.debug(LoggingLevel.WARN, '8');
                                        /*if (customer != null && customer.LastName != null && customer.LastName != '') {
                                            //System.debug(customer.LastName);
                                            customerExternalIds.add(customer.ECS__Customer_External_Id__c);
                                            if(existingContactMap.containsKey(thisOrderId)) {
                                                System.debug('adding pending customer to real customer update! customer.ECS__Customer_External_Id__c='+customer.ECS__Customer_External_Id__c);
                                                customersToUpdate.add(customer);
                                            } else if(!customers.containsKey(customer.ECS__Customer_External_Id__c)) {
                                                customers.put(customer.ECS__Customer_External_Id__c, customer);
                                            }
                                            //contactIdToIntMap.put(i, customer.ECS__Customer_External_Id__c);
                                            //System.debug(i);
                                            //System.debug(customer.ECS__Customer_External_Id__c);
                                        }*/
                                } else if('Canceled'.equals(orderStatus)){
                                    CancelledOrderIds.add(thisOrderId);
                                }
                            }
                        }
                   
                   try {
                       //Update amazon queue status as cancelled if order status is cancelled
                        if(CancelledOrderIds.Size() > 0) {
                            List<Amazon_Queue__c> qList = new List<Amazon_Queue__c>();
                            for(Amazon_Queue__c q : [Select Id, Identifier__c, Status__c From Amazon_Queue__c Where Identifier__c IN:CancelledOrderIds]) {
                                q.Status__c = 'Cancelled';
                                qList.add(q);
                            }
                            if(qList.size()>0) update qList;
                            
                            List<ECS__eCommSource_Order__c> orderList = new List<ECS__eCommSource_Order__c>();
                            for(ECS__eCommSource_Order__c order : [Select Id,Name,ECS__Order_Status__c from ECS__eCommSource_Order__c Where ECS__External_Order_ID__c IN:CancelledOrderIds ]){
                                order.ECS__Order_Status__c = 'Cancelled';
                                orderList.add(order);
                            }
                            
                            if(orderList.size()>0) update orderList;
                        }
                   } catch(Exception e){
                     System.Debug('***e**'+e);
                   }
                    // First update existing temp contacts
                    // if(customersToUpdate!=null && customersToUpdate.size()>0) Database.update(customersToUpdate, false);
                    
                    // First upsert contacts
                    handleUpsertResult(Database.upsert(customers.values(), Contact.ECS__Customer_External_Id__c, false));
                    
                    for(ECS__Address__c a: [Select Id, ECS__External_Address_ID__c From ECS__Address__c Where ECS__External_Address_ID__c IN:addressIds]) {
                        addresses.put(a.ECS__External_Address_ID__c, a);
                    }
                            
                    Map<String, Contact> customerList = new Map<String, Contact>();
                    for (Contact c : [SELECT Id, ECS__Customer_External_Id__c 
                                      From Contact 
                                      WHERE ECS__Customer_External_Id__c in :customers.keySet()]) {
                         customerList.put(c.ECS__Customer_External_Id__c, c);
                         //System.debug(LoggingLevel.INFO, c.ECS__Customer_External_Id__c);
                    }

                        System.debug('customerList='+customerList);

                        Map<String, CC_XmlNode> ordersXMLMap = new Map<String, CC_XmlNode>();
                        for(CC_XmlNode o : orders) {

                            if(o!=null) {
                                
                                DateTime orderTime;
                                if(o.getElementByTagName('PurchaseDate') != null) {
                                   orderTime = AmazonUtils.getOrderTime(o.getElementByTagName('PurchaseDate').nodeValue);
                                }

                                System.debug('orderTime='+orderTime);
                                System.debug('syncOrdersAfter='+syncOrdersAfter);
                        
                                if(orderTime!=null && (syncOrdersAfter==null || orderTime>syncOrdersAfter)) {
                                
                                    String thisOrderId = AmazonUtils.getOrderId(o);
                                                                        
                                    ordersXMLMap.put(thisOrderId, o);

                                    ECS__Address__c addr = new ECS__Address__c();
                                    String buyerEmail = AmazonUtils.getBuyerEmail(o);
                                    if(buyerEmail==null || buyerEmail=='') buyerEmail = thisOrderId;
                                    
                                    System.debug(LoggingLevel.WARN, 'buyerEmail for Address='+buyerEmail+'|');
                                    
                                    Contact customer = customerList.get(buyerEmail);
                                    if(customer!=null) {

                                        String buyerName;
                                        if(o.getElementByTagName('BuyerName')!=null) buyerName = o.getElementByTagName('BuyerName').nodeValue;

                                        CC_XmlNode shipping = o.getElementByTagName('ShippingAddress');

                                        if(buyerName!=null && shipping!=null && shipping.getElementByTagName('Name')!=null && buyerName!=null && !buyerName.equals(shipping.getElementByTagName('Name').nodeValue)) {
                                            String fakeEmail = 'shiptocustomer-' + thisOrderId + '@notavailable.com';
                                            System.debug('fakeEmail='+fakeEmail);
                                            Contact fakeCustomer = customerList.get(fakeEmail);
                                            if(fakeCustomer!=null) addr.ECS__Customer__c = fakeCustomer.Id;

                                        } else {
                                            addr.ECS__Customer__c = customer.Id;
                                        }
                                        System.debug('addr='+addr);
                                            
                                        if(shipping!=null && (!lockOrdersAfterImport || !existingOrders.containsKey(thisOrderId))) {
                                            String addressId = thisOrderId;

                                            if(addr != null && !addresses.containsKey(addressId)) {
                                                String name = '';
                                                CC_XmlNode nameNode;

                                                if ((nameNode = shipping.getElementByTagName('Name')) != null) {
                                                    name = nameNode.nodeValue;
                                                }
        
                                                addr.Name = name;

                                                Name shipToNames = new Name(name);
                                                addr.ECS__First_Name__c = shipToNames.firstName;
                                                addr.ECS__Last_Name__c = shipToNames.lastName;
                                                
                                                if (shipping.getElementByTagName('AddressLine1') != null) {
                                                    addr.ECS__Address_Line_1__c = shipping.getElementByTagName('AddressLine1').nodeValue;
                                                }

                                                if (shipping.getElementByTagName('AddressLine2') != null) {
                                                    addr.ECS__Address_Line_2__c = shipping.getElementByTagName('AddressLine2').nodeValue;
                                                }

                                                if (shipping.getElementByTagName('AddressLine3') != null) {
                                                    addr.ECS__Address_Line_3__c = shipping.getElementByTagName('AddressLine3').nodeValue;
                                                }

                                                addr.ECS__City__c = shipping.getElementByTagName('City').nodeValue;

                                                addr.ECS__Country__c = shipping.getElementByTagName('CountryCode').nodeValue;

                                                addr.ECS__Is_Shipping_Address__c = true;

                                                if (shipping.getElementByTagName('Phone') != null) {
                                                    addr.ECS__Phone_Number__c = shipping.getElementByTagName('Phone').nodeValue;
                                                }

                                                if (shipping.getElementByTagName('StateOrRegion') != null) {
                                                    addr.ECS__State_Province_Region__c = shipping.getElementByTagName('StateOrRegion').nodeValue;
                                                }

                                                if (shipping.getElementByTagName('PostalCode') != null) {
                                                    addr.ECS__Zip_Postal_Code__c = shipping.getElementByTagName('PostalCode').nodeValue;
                                                }

                                                addr.ECS__External_Address_ID__c = addressId;
                                                
                                                if(shipping.getElementByTagName('') != null) {
                                                    String commercial = shipping.getElementByTagName('Commercial').nodeValue;
                                                    if('Commercial'.equals(commercial)) addr.ECS__Is_Residential__c = true;
                                                }

                                                if(!addresses.containsKey(addr.ECS__External_Address_Id__c)) addresses.put(addr.ECS__External_Address_Id__c, addr);
                                            }
                                        }

                                        ECS__eCommSource_Order__c order = new ECS__eCommSource_Order__c();
                                        
                                        order.Name = thisOrderId;
                                        order.ECS__External_Order_ID__c = order.Name;
                                        order.ECS__Customer__c = customer.Id;
                                        order.ECS__Account__c = accountId;
                                        order.ECS__Origin__c = 'Amazon';
                                        order.ECS__Payment_Type__c = 'Amazon';
                                        order.ECS__Checkout_Time__c = orderTime;
                                        order.ECS__Order_Time__c = orderTime;
                                        
                                        if(aset!=null && aset.Order_Setting__c!=null) order.ECS__Order_Setting__c = aset.Order_Setting__c;
                                        
                                        if(o.getElementByTagName('SalesChannel') != null) {
                                           order.ECS__Sale_Site__c = o.getElementByTagName('SalesChannel').nodeValue;
                                        }
                                        
                                        if(o.getElementByTagName('PurchaseOrderNumber')!=null && o.getElementByTagName('PurchaseOrderNumber').nodeValue!=null) {
                                            order.Amazon_PO_Num__c = o.getElementByTagName('PurchaseOrderNumber').nodeValue;
                                        }
                                        
                                        if(o.getElementByTagName('IsBusinessOrder')!=null && 'true'.equals(o.getElementByTagName('IsBusinessOrder').nodeValue)) {
                                            order.Amazon_Business_Order__c = true;
                                        }
                                        
                                        if(o.getElementByTagName('IsPrime')!=null && 'true'.equals(o.getElementByTagName('IsPrime').nodeValue)) {
                                            order.Seller_Fulfilled_Prime__c = true;
                                        }
                                            
                                        if(o.getElementByTagName('EarliestDeliveryDate')!=null && o.getElementByTagName('EarliestDeliveryDate').nodeValue!=null) {
                                            order.SFP_Earliest_Delivery_Date__c = AmazonUtils.getOrderTime(o.getElementByTagName('EarliestDeliveryDate').nodeValue);
                                        }

                                        if(o.getElementByTagName('LatestDeliveryDate')!=null && o.getElementByTagName('LatestDeliveryDate').nodeValue!=null) {
                                            order.SFP_Latest_Delivery_Date__c = AmazonUtils.getOrderTime(o.getElementByTagName('LatestDeliveryDate').nodeValue);
                                        }
                                            
                                        if(o.getElementByTagName('SellerOrderId')!=null) {
                                           order.ECS__Client_Order_Identifier__c = o.getElementByTagName('SellerOrderId').nodeValue;
                                        }
                                            
                                        if(o.getElementByTagName('FulfillmentChannel') != null) {
                                           order.ECS__Sales_Channel_Lookup__c = o.getElementByTagName('FulfillmentChannel').nodeValue;
                                        }
                                            
                                        if(buyerEmail!=null && buyerEmail!='' && buyerEmail!=thisOrderId) {
                                           order.ECS__Customer_Email_Address__c = buyerEmail;
                                        }
                                        
                                        String orderStatus = AmazonUtils.getOrderStatus(o);
                                        if('Canceled'.equals(orderStatus)) {
                                           order.ECS__Order_Status__c = 'Cancelled';
                                           System.Debug('***Order status is**'+order.ECS__Order_Status__c);
                                           orderList.put(order.ECS__External_Order_ID__c, order);
                                        } else if(customer!=null) {
                                        
                                            //if(o.getElementByTagName('SellerOrderId')!=null) {
                                            //   order.ECS__Client_Order_Identifier__c = o.getElementByTagName('SellerOrderId').nodeValue;
                                            //}
                                            
                                            //String buyerEmail = AmazonUtils.getBuyerEmail(o);
                                            //System.debug(LoggingLevel.WARN, 'buyerEmail for Address = '+buyerEmail);
                                            //if(buyerEmail==null || buyerEmail=='') buyerEmail = order.Name;
                                            //System.debug(LoggingLevel.WARN, '9');
                                            //System.debug('orderId='+order.Name);
                                            
                                            order.ECS__Order_Status__c = o.getElementByTagName('OrderStatus').nodeValue;
                                            
                                            if(!'Pending'.equals(order.ECS__Order_Status__c)) {
                                                order.ECS__Payment_Time__c = order.ECS__Order_Time__c;
                                                order.ECS__Checkout_Status__c = 'Completed';
                                                order.ECS__Payment_Status__c = 'Cleared';
                                            }
                                            
                                            Integer numberOfItemsShipped = 0;
                                            Integer numberOfItemsUnshipped = 0;
                                            
                                            if(o.getElementByTagName('NumberOfItemsUnshipped')!=null) {
                                                numberOfItemsUnshipped = Integer.valueOf(o.getElementByTagName('NumberOfItemsUnshipped').nodeValue);
                                            }

                                            if(o.getElementByTagName('NumberOfItemsShipped')!=null) {
                                                numberOfItemsShipped = Integer.valueOf(o.getElementByTagName('NumberOfItemsShipped').nodeValue);
                                            }

                                            if(numberOfItemsShipped>0 && numberOfItemsUnshipped!=0) {
                                               order.ECS__Status_of_Shipment__c = 'Partially Shipped';
                                            } else if(numberOfItemsUnshipped==0) {
                                                order.ECS__Status_of_Shipment__c = 'Shipped';
                                            } else {
                                                order.ECS__Status_of_Shipment__c = 'Unshipped';
                                            }
                                            
                                            /*CC_XmlNode orderItems = details.getElementByTagName('OrderItems');
                                            List<CC_XmlNode> orderItemList = orderItems.getElementsByTagName('OrderItem');
                                            for (CC_XmlNode order_item : orderItemList) {
                                                CC_XmlNode shippingprice = order_item.getElementByTagName('ShippingPrice');
                                                String shippingPriceAmount = null;
                                                if(shippingprice != null) {
                                                   shippingprice = shippingprice.getElementByTagName('Amount');
                                                   if(shippingprice != null) shippingPriceAmount = shippingprice.nodeValue;
                                                }
                                                
                                                if (shippingPriceAmount != null) shipping += Decimal.valueOf(shippingPriceAmount);
                                            }*/
                                            
                                            
                                            /*if (o.getElementByTagName('LastUpdateDate') != null) {
                                                time_string = o.getElementByTagName('LastUpdateDate').nodeValue;
                                            }
                                            //else {System.debug(LoggingLevel.INFO, '0'); time_string = null;}
                                            //System.debug(LoggingLevel.INFO, time_string);
                                            if (time_string != null) {
                                                time_string = time_string.replace('T', ' ');
                                                time_string = time_string.replace('Z', '');
                                                mytime = Datetime.valueOf(time_string);
                                            }
                                            //System.debug(LoggingLevel.WARN, '12');
                                            if (mytime != null) order.ECS__Order_Time__c = mytime;*/
                                            
                                            // Could this be made into ext id?
                                            if (o.getElementByTagName('Phone') != null) order.ECS__Phone__c = o.getElementByTagName('Phone').nodeValue;
                                            
                                            order.ECS__Payment_Type__c = 'Amazon';
                                            order.ECS__Payment_Transaction_Id__c = thisOrderId;
                                            
                                            //System.debug('6');
                                            //if (o.getElementByTagName('OrderTotal') != null) {
                                            CC_XmlNode ordertotal = o.getElementByTagName('OrderTotal');
                                            //System.debug(LoggingLevel.WARN, '13');
                                            order.ECS__Flag_Description__c = 'Amazon Auto-update';
                                            //System.debug('7');
                                            
                                            if(ordertotal!=null) {
                                                if(ordertotal.getElementByTagName('Amount')!=null) order.ECS__Total_Order_Amount__c = Decimal.valueOf(ordertotal.getElementByTagName('Amount').nodeValue);
                                                if(Userinfo.isMultiCurrencyOrganization() && ordertotal.getElementByTagName('CurrencyCode')!=null) {
                                                    order.put('CurrencyIsoCode', ordertotal.getElementByTagName('CurrencyCode').nodeValue);
                                                }
                                            }
                                            
                                            //}
                                            //System.debug('8');
                                            orderList.put(order.ECS__External_Order_ID__c, order);
                                            
                                            //System.debug('9');
                                            //i++;
                                        } else {
                                            System.debug('Customer is null!');
                                        }
                                    }
                                }
                                }
                            }
                            System.debug('orderList='+orderList);
                            
                            handleUpsertResult(Database.upsert(addresses.values(),  ECS__Address__c.ECS__External_Address_ID__c, false));
                            
                            Map<String, ECS__Address__c> addressMap = new Map<String, ECS__Address__c>();
                            for(ECS__Address__c a : [Select Id, ECS__External_Address_ID__c From ECS__Address__c Where ECS__External_Address_ID__c IN:addresses.keySet()]) {
                                addressMap.put(a.ECS__External_Address_ID__c, a);
                            }
                            
                            handleUpsertResult(Database.upsert(orderList.values(),  ECS__eCommSource_Order__c.ECS__External_Order_Id__c, false));
    
                            List<ECS__eCommSource_Order_Line__c> olsToUpdate = new List<ECS__eCommSource_Order_Line__c>();
                            List<ECS__Shipping_Detail__c> shippingToUpsert = new List<ECS__Shipping_Detail__c>();
                            for(ECS__eCommSource_Order__c o : [Select ECS__External_Order_ID__c, ECS__Customer__c, ECS__Customer__r.Name, 
                                                                     (Select Id, ECS__Shipping_Detail_External_Id__c From ECS__Shipping_Details__r), 
                                                                     (Select Id From ECS__Order_Lines__r) 
                                                               From ECS__eCommSource_Order__c Where ECS__External_Order_ID__c IN:orderList.keySet()]) {
                                if(o.ECS__Order_Lines__r!=null && o.ECS__Order_Lines__r.size()>0) {
                                    for(ECS__eCommSource_Order_Line__c ol : o.ECS__Order_Lines__r) {
                                        ol.ECS__Customer__c = o.ECS__Customer__c;
                                        olsToUpdate.add(ol);
                                    }
                                }
                                /*if(o.ECS__Shipping_Details__r!=null && o.ECS__Shipping_Details__r.size()>0) {
                                    for(ECS__Shipping_Detail__c sd : o.ECS__Shipping_Details__r) {
                                        sd.ECS__Customer__c = o.ECS__Customer__c;
                                        sd.Name = o.ECS__Customer__r.Name;
                                        shippingToUpsert.add(sd);
                                    }
                                } else {*/

                                    CC_XmlNode orderXML = ordersXMLMap.get(o.ECS__External_Order_ID__c);
                                    if(orderXML!=null) {
                                        String buyerName;
                                        if(orderXML.getElementByTagName('BuyerName')!=null) buyerName = orderXML.getElementByTagName('BuyerName').nodeValue;

                                        String thisOrderId = AmazonUtils.getOrderId(orderXML);

                                        ECS__Shipping_Detail__c shippingDetail = new ECS__Shipping_Detail__c();

                                        CC_XmlNode shipping = orderXML.getElementByTagName('ShippingAddress');

                                        if(shipping!=null && shipping.getElementByTagName('Name')!=null && buyerName!=null && !buyerName.equals(shipping.getElementByTagName('Name').nodeValue)) {
                                            String fakeEmail = 'shiptocustomer-' + thisOrderId + '@notavailable.com';
                                            System.debug('fakeEmail='+fakeEmail);
                                            Contact fakeCustomer = customerList.get(fakeEmail);
                                            if(fakeCustomer!=null) shippingDetail.ECS__Customer__c = fakeCustomer.Id;

                                            shippingDetail.Name = shipping.getElementByTagName('Name').nodeValue;

                                        } else {
                                            shippingDetail.Name = buyerName;
                                            String buyerEmail = AmazonUtils.getBuyerEmail(orderXML);
                                            if(customerList.containsKey(buyerEmail)) {
                                                shippingDetail.ECS__Customer__c = customerList.get(buyerEmail).Id;
                                            }
                                        }

                                        shippingDetail.ECS__Order__c = o.Id;
                                        shippingDetail.ECS__Shipping_Detail_External_Id__c = o.ECS__External_Order_ID__c;
                                        if(orderXML.getElementByTagName('ShipServiceLevel')!=null) shippingDetail.ECS__Shipping_Carrier__c = orderXML.getElementByTagName('ShipServiceLevel').nodeValue;
                                        if(addressMap.containsKey(o.ECS__External_Order_ID__c)) shippingDetail.ECS__Shipping_Address__c = addressMap.get(o.ECS__External_Order_ID__c).Id;
                                        shippingToUpsert.add(shippingDetail);
                                    // }
                                }

                            }
                            
                            if(olsToUpdate.size()>0) update olsToUpdate; 
                            if(shippingToUpsert.size()>0) Database.upsert(shippingToUpsert, ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false);
    
                            // Need to handle this better, probably ...
                            /*for (String current : ordersToDelete) {
                                // This actually just changes the status to cancelled, which makes way more sense
                                AmazonUtils.removeOrderLinesFromCancelledOrder(current);
                            }*/
                            
                            /*List<ECS__eCommSource_Order_Line__c> orderLinesToCancel = [SELECT Id, Name
                                                                                        FROM ECS__eCommSource_Order_Line__c
                                                                                        WHERE ECS__Order__c in :ordersToDelete];
                            for (ECS__eCommSource_Order_Line__c current : orderLinesToCancel) {
                                current.ECS__Status__c = 'Processed';
                            }
                            
                            Database.upsert(orderLinesToCancel, ECS__eCommSource_Order_Line__c.ECS__External_Order_Line_ID__c, false);
                            
                            List<ECS__eCommSource_Order__c> ordersToDeleteObj = [SELECT Id 
                                                                                FROM ECS__eCommSource_Order__c
                                                                                WHERE Name in :ordersToDelete];
                            
                            // ... and check for errors here
                            for (ECS__eCommSource_Order__c current : ordersToDeleteObj) {
                                current.ECS__Order_Status__c = 'Processed';
                                current.ECS__Cancelled_Time__c = Datetime.now();
                            }
                            
                            handleUpsertResult(Database.upsert(ordersToDeleteObj, ECS__eCommSource_Order__c.ECS__External_Order_Id__c, false));*/
                            
                            //System.debug(LoggingLevel.INFO, customers.size());
                            //System.debug(LoggingLevel.INFO, addresses.size());
                            //System.debug(LoggingLevel.INFO, orderList.size());
    
                            // todo: fix
                            /*Integer k = 0;
                            System.debug(LoggingLevel.WARN, 'b');
                            for(CC_XmlNode o : orders) {
                                // Will OrderStatus always not be null?
                                if (o != null) {
                                    if ((o.getElementByTagName('OrderStatus').nodeValue).toLowerCase()=='canceled' ||
                                    (o.getElementByTagName('OrderStatus').nodeValue).toLowerCase() == 'pending') {
                                        //System.debug('canceled');
                                    } 
                                    else {
                                        Contact current_contact; 
                                        if (existingContactMap.containsKey(k)) current_contact = existingContactMap.get(k);
                                        else current_contact = customersWithIds.get(contactIdToIntMap.get(k));
                                        System.debug(contactIdToIntMap.get(k));
                                        ECS__Address__c current_addr = addresses.get(addrIdToIntMap.get(k));
                                        ECS__eCommSource_Order__c current_order = orderList.get(AmazonUtils.getOrderId(o));
                                        System.debug(LoggingLevel.WARN, current_contact);
                                        if (current_addr != null && current_order != null) {
                                            System.debug(LoggingLevel.WARN, 'c');
                                            if (current_contact != null) {
                                                if (current_addr.ECS__Customer__c == null) current_addr.ECS__Customer__c = current_contact.id;
                                                current_order.ECS__Customer__c = current_contact.id;
                                                addresses.put(current_addr.ECS__External_Address_ID__c, current_addr);
                                                orderList.put(current_order.ECS__External_Order_Id__c, current_order);
                                            }
                                            else {
                                                System.debug(LoggingLevel.WARN, 'd');
                                                addresses.remove(current_addr.ECS__External_Address_Id__c);
                                                orderList.remove(current_order.ECS__External_Order_Id__c);
                                            }
                                        }
                                    }
                                }
                                k++;
                            }*/
                        }
                }
            } catch(System.Exception e) {
                //Util.sendErrorEmail('Error parsing order info response for user'+UserInfo.getName(), 'xml='+getOrdersResponse, e);
                System.debug(LoggingLevel.WARN, 'Error parsing Order Info Response: exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' linenum='+e.getLineNumber());
 
                ECS__Log__c l = new ECS__Log__c();
                l.setOptions(dmo);
                l.ECS__Log_Name__c = 'Amazon getOrderResponse Exception';
                l.ECS__Log_Detail__c = 'Exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString();
                insert l;
            
                throw e;
            }
        }
    }

    // Parses the response to a request to Amazon for the details of an order
    public class parseOrderDetails {
        
        CC_XmlNode details;
        
        public ECS__eCommSource_Order__c thisOrder;
        
        public Map<String, ECS__Product__c> products;
        public Map<String, ECS__eCommSource_Order_Line__c> orderLines;
        public Map<String, ECS__Shipping_Detail__c> shippingDetails;
        public Map<String, ECS__Products_Purchased__c> purchasedProducts;
        
        public Id acct;
        
        public parseOrderDetails(CC_XmlNode node) {
            details = node;
            //parseDetails();
        }
        
        public void parseDetails() {
            try {
 
                Boolean lockOrdersAfterImport = AmazonUtils.lockOrdersAfterImport();
                
                products = new Map<String, ECS__Product__c>();
                orderLines = new Map<String, ECS__eCommSource_Order_Line__c>();
                shippingDetails = new Map<String, ECS__Shipping_Detail__c>();
                purchasedProducts = new Map<String, ECS__Products_Purchased__c>();
                
                // OrderItems will never be null?
                if (details == null) return;
                CC_XmlNode orderItems = details.getElementByTagName('OrderItems');
                System.debug(LoggingLevel.INFO, 'Amazon Order Id: ' + details.getElementByTagName('AmazonOrderId').nodeValue);
                //System.debug(LoggingLevel.INFO, 'orderItems: ' + orderItems);
                List<CC_XmlNode> orderItemList = new List<CC_XmlNode>();
                orderItemList = orderItems.getElementsByTagName('OrderItem');
                
                CC_XmlNode item;
                
                String amazonOrderId = details.getElementByTagName('AmazonOrderId').nodeValue;
                List<ECS__eCommSource_Order__c> thisOrderL = [SELECT Id, ECS__Num_of_Items__c, ECS__External_Order_Id__c, ECS__Client_Order_Identifier__c, 
                                                                     ECS__Customer__c, ECS__Order_Time__c, Name, ECS__Order_Status__c, ECS__Order_Total__c, ECS__Total_Order_Amount__c,
                                                                     ECS__Sales_Channel_Lookup__c, ECS__Shipping_Detail__r.ECS__Shipping_Address__c, ECS__Order_Line_Total__c
                                                              FROM ECS__eCommSource_Order__c
                                                              WHERE ECS__External_Order_Id__c = :amazonOrderId];

                if (thisOrderL.size() == 0) return;
                
                thisOrder = thisOrderL[0];
                
                Contact thisCustomer = [SELECT Id, Name, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry
                                        FROM Contact
                                        WHERE id = :thisOrder.ECS__Customer__c];
                Double tax = 0;
                Double discount = 0;

                Boolean marketplaceFacilitator = false;

                Double delta = 0;
                if(thisOrder.ECS__Order_Total__c!=null && thisOrder.ECS__Total_Order_Amount__c!=null) {
                    delta = thisOrder.ECS__Order_Total__c - thisOrder.ECS__Total_Order_Amount__c;
                }

                if(!lockOrdersAfterImport || thisOrder.ECS__Num_of_Items__c==0 || thisOrder.ECS__Shipping_Detail__r.ECS__Shipping_Address__c==null || thisOrder.ECS__Order_Line_Total__c==0 || delta!=0) {

                    for (CC_XmlNode order_item : orderItemList) {
                        // Title will never be null?
                        System.debug(LoggingLevel.INFO, 'Title: ' + order_item.getElementByTagName('Title').nodeValue);

                        if (order_item.getElementByTagName('PromotionIds') != null) {
                            CC_XmlNode promoIds = order_item.getElementByTagName('PromotionIds');
                            //System.debug('promoIds='+promoIds);
                            if (promoIds != null && promoIds.getElementByTagName('PromotionId') != null) {
                                String pid = promoIds.getElementByTagName('PromotionId').nodeValue;
                                System.debug('promoId=' + pid);
                                thisOrder.ECS__Coupon_Code__c = pid;
                            }
                        }

                        if (order_item.getElementByTagName('PromotionDiscount') != null) {
                            CC_XmlNode promoDiscount = order_item.getElementByTagName('PromotionDiscount');
                            if (promoDiscount != null && promoDiscount.getElementByTagName('Amount') != null) {
                                String discountAmount = promoDiscount.getElementByTagName('Amount').nodeValue;
                                System.debug('discountAmount=' + discountAmount);
                                if (discountAmount != null && discountAmount != '') discount += Double.valueOf(discountAmount);
                            }
                        }

                        ECS__Product__c product = new ECS__Product__c();
                        if (acct != null) product.ECS__Account__c = acct;
                        ECS__Products_Purchased__c purchasedProduct = new ECS__Products_Purchased__c();
                        ECS__eCommSource_Order_Line__c orderLine = new ECS__eCommSource_Order_Line__c();
                        ECS__Shipping_Detail__c shippingDetail = new ECS__Shipping_Detail__c();

                        // In testing, none of these have been null so far. Is that always going to be true?
                        if (order_item.getElementByTagName('SellerSKU') != null) product.Name = order_item.getElementByTagName('SellerSKU').nodeValue;

                        //product.ECS__Title__c = order_item.getElementByTagName('Title').nodeValue;

                        product.ECS__External_Product_ID__c = product.Name;
                        product.ECS__ASIN__c = order_item.getElementByTagName('ASIN').nodeValue;

                        Decimal numOrdered = Decimal.valueOf(order_item.getElementByTagName('QuantityOrdered').nodeValue);

                        CC_XmlNode numShippedNode = order_item.getElementByTagName('QuantityShipped');
                        String numShippedString;
                        if (numShippedNode != null) numShippedString = numShippedNode.nodeValue; else numShippedNode = null;
                        //Integer numOrdered = Integer.valueOf(numOrderedString);
                        Integer numShipped = Integer.valueOf(numShippedString);

                        if (numOrdered > 0 && (numOrdered == numShipped)) orderLine.ECS__Status__c = 'Shipped';

                        if (thisOrder.ECS__Client_Order_Identifier__c != null && thisOrder.ECS__Client_Order_Identifier__c.startsWith('REM')) {
                            orderLine.ECS__Status__c = 'Removal';
                        } else if (numOrdered == 0) {
                            orderLine.ECS__Status__c = 'Cancelled';
                        } else {
                            if (thisOrder.ECS__Order_Status__c == 'Processed') orderLine.ECS__Status__c = 'Processed'; else orderLine.ECS__Status__c = 'Ordered';

                            orderLine.ECS__Quantity__c = purchasedProduct.ECS__Quantity_Purchased__c = numOrdered;

                            item = order_item.getElementByTagName('ItemPrice');
                            if (item != null && item.getElementByTagName('Amount') != null) {
                                Double amount = Decimal.valueOf(item.getElementByTagName('Amount').nodeValue);
                                if (amount > 0) {
                                    orderLine.ECS__Order_Line_Total__c = amount;
                                    purchasedProduct.ECS__Purchase_Price__c = orderLine.ECS__Unit_Price__c = amount / numOrdered;
                                }
                            }
                        }

                        purchasedProduct.Name = product.Name;
                        purchasedProduct.ECS__Contact__c = thisCustomer.id;
                        //tbd later in this method: product
                        purchasedProduct.ECS__Order__c = thisOrder.id;
                        // AmazonUtils.getPurchaseId(details, order_item);
                        String Titlevalue;
                        if (order_item.getElementByTagName('Title').nodeValue != null && order_item.getElementByTagName('Title').nodeValue.length() > 255) {
                            Titlevalue = order_item.getElementByTagName('Title').nodeValue.Substring(0, 255);
                        } else {
                            Titlevalue = order_item.getElementByTagName('Title').nodeValue;
                        }

                        orderLine.ECS__Product_Title__c = purchasedProduct.ECS__Product_Title__c = Titlevalue;
                        purchasedProduct.ECS__Purchase_Date__c = thisOrder.ECS__Order_Time__c;

                        orderLine.Name = thisOrder.Name;

                        if ('AFN'.equals(thisOrder.ECS__Sales_Channel_Lookup__c)) orderLine.ECS__Is_FBA__c = true;

                        orderLine.ECS__Customer__c = thisCustomer.id;
                        orderLine.ECS__Order__c = thisOrder.id;
                        purchasedProduct.ECS__External_Purchased_Product_ID__c = orderLine.ECS__External_Order_Line_ID__c = order_item.getElementByTagName('OrderItemId').nodeValue;

                        CC_XmlNode promotionDiscount = order_item.getElementByTagName('PromotionDiscount');
                        if (promotionDiscount != null) {
                            orderLine.ECS__Discount_Amount__c = Double.valueOf(promotionDiscount.getElementByTagName('Amount').nodeValue);
                        }

                        CC_XmlNode shippingDiscount = order_item.getElementByTagName('ShippingDiscount');
                        if (shippingDiscount != null) {
                            orderLine.ECS__Shipping_Discount__c = Double.valueOf(shippingDiscount.getElementByTagName('Amount').nodeValue);
                        }

                        //CC_XmlNode numOrderedNode = order_item.getElementByTagName('QuantityOrdered');
                        //String numOrderedString;
                        //if (numOrderedNode != null) numOrderedString = numOrderedNode.nodeValue;
                        //else numOrderedString = null;

                        orderLine.ECS__Sale_Source__c = 'Amazon';

                        /*<TaxCollection>
                        <Model>MarketplaceFacilitator</Model>
                        <ResponsibleParty>Amazon Services, Inc.</ResponsibleParty>
                        </TaxCollection>*/

                        if (order_item.getElementByTagName('TaxCollection') != null) {
                            CC_XmlNode taxCollection = order_item.getElementByTagName('TaxCollection');
                            if (taxCollection.getElementByTagName('Model') != null && 'MarketplaceFacilitator'.equals(String.valueOf(taxCollection.getElementByTagName('Model').nodeValue))) {
                                marketplaceFacilitator = true;
                            }
                        }

                        if (order_item.getElementByTagName('ItemTax') != null) {
                            if (order_item.getElementByTagName('ItemTax').getElementByTagName('Amount') != null) {
                                tax += Decimal.valueOf(order_item.getElementByTagName('ItemTax').getElementByTagName('Amount').nodeValue);
                                orderLine.ECS__Tax__c = tax;
                            }
                        }

                        CC_XmlNode shippingprice = order_item.getElementByTagName('ShippingPrice');
                        CC_XmlNode shippingtax = order_item.getElementByTagName('ShippingTax');
                        String shippingPriceAmount = null;
                        String shippingTaxAmount = null;
                        if (shippingprice != null) {
                            shippingprice = shippingprice.getElementByTagName('Amount');
                            if (shippingprice != null) shippingPriceAmount = shippingprice.nodeValue;
                        }
                        if (shippingtax != null) {
                            shippingtax = shippingtax.getElementByTagName('Amount');
                            if (shippingtax != null) shippingTaxAmount = shippingtax.nodeValue;
                        }
                        Decimal shipping = 0;
                        if (shippingPriceAmount != null) shipping += Decimal.valueOf(shippingPriceAmount);
                        if (shippingTaxAmount != null) shipping += Decimal.valueOf(shippingTaxAmount);
                        orderLine.ECS__Shipping__c = shipping;

                        /*shippingDetail.Name = thisCustomer.Name;
                        shippingDetail.ECS__Order__c = thisOrder.id;
                        shippingDetail.ECS__Customer__c = thisCustomer.id;
                        
                        List<String> addr_list;
                        if (thisCustomer.MailingStreet != null) addr_list = thisCustomer.MailingStreet.split('\n');
                        else {
                            addr_list = new List<String>();
                            addr_list.add('Test');
                        }
                        for (String s : addr_list) {
                            System.debug(LoggingLevel.INFO, s);
                        }
                        if (addr_list.size() == 1) addr_list.add(null);
                        
                        /*List<ECS__Address__c> addrList = [SELECT id 
                                                FROM ECS__Address__c
                                                WHERE ECS__Address_Line_1__c = :addr_list[0]
                                                AND ECS__Address_Line_2__c = :addr_list[1]
                                                AND ECS__City__c = :thisCustomer.MailingCity
                                                AND ECS__State_Province_Region__c = :thisCustomer.MailingState
                                                AND ECS__Zip_Postal_Code__c = :thisCustomer.MailingPostalCode
                                                AND ECS__Country__c = :thisCustomer.MailingCountry limit 1];
                        if (addrList.size() == 0) addrList.add(null);
    
                        List<ECS__Address__c> addrList = [SELECT id FROM ECS__Address__c WHERE ECS__External_Address_Id__c=:amazonOrderId];
                        if (addrList.size() == 0) addrList.add(null);
                        
                        ECS__Address__c addr = addrList[0];
                        
                        if (addr != null) shippingDetail.ECS__Shipping_Address__c = addr.id;

                        // String ext_id = String.valueOf(thisOrder.id) + String.valueOf(thisCustomer.id);

                        shippingDetail.ECS__Shipping_Detail_External_Id__c = thisOrder.Name; // ext_id.substring(0, Math.min(ext_id.length(), 25));
                        
                        shippingDetail.ECS__Origin__c = 'Amazon';*/

                        //shippingDetail.ECS__Shipping_Amount__c
                        //orderLine.ECS__Order_Line_Total__c = orderLine.ECS__Total__c;

                        products.put(product.ECS__External_Product_ID__c, product);
                        purchasedProducts.put(purchasedProduct.ECS__External_Purchased_Product_ID__c, purchasedProduct);
                        //shippingDetails.put(shippingDetail.ECS__Shipping_Detail_External_Id__c, shippingDetail);
                        orderLines.put(orderLine.ECS__External_Order_Line_ID__c, orderLine);
                    }

                    handleUpsertResult(Database.upsert(products.values(), ECS__Product__c.ECS__External_Product_ID__c, false));
                    handleUpsertResult(Database.upsert(shippingDetails.values(), ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));

                    Map<String, Id> productsMap = new Map<String, Id>();
                    Map<String, Id> shippingDetailsMap = new Map<String, Id>();

                    for (ECS__Product__c current : [
                            SELECT Id, ECS__External_Product_ID__c
                            FROM ECS__Product__c
                            WHERE ECS__External_Product_ID__c in :products.keySet()
                    ]) {
                        productsMap.put(current.ECS__External_Product_ID__c, current.id);
                    }

                    for (ECS__Shipping_Detail__c current : [
                            SELECT Id, ECS__Shipping_Detail_External_Id__c
                            FROM ECS__Shipping_Detail__c
                            WHERE ECS__Shipping_Detail_External_Id__c in :shippingDetails.keySet()
                    ]) {
                        shippingDetailsMap.put(current.ECS__Shipping_Detail_External_Id__c, current.id);
                    }

                    for (CC_XmlNode order_item : orderItemList) {

                        Id currentProduct;
                        if (order_item.getElementByTagName('SellerSKU') != null) currentProduct = productsMap.get(order_item.getElementByTagName('SellerSKU').nodeValue);
                        String ext_id = String.valueOf(thisOrder.id) + String.valueOf(thisCustomer.id);
                        Id currentShipping = shippingDetailsMap.get(ext_id.substring(0, Math.min(ext_id.length(), 25)));

                        ECS__eCommSource_Order_Line__c currentOrderLine = orderLines.get(order_item.getElementByTagName('OrderItemId').nodeValue);
                        ECS__Products_Purchased__c currentPurchasedProduct = purchasedProducts.get(order_item.getElementByTagName('OrderItemId').nodeValue);

                        System.debug('currentProduct=' + order_item.getElementByTagName('SellerSKU').nodeValue);

                        System.debug('currentOrderLine=' + currentOrderLine);
                        if (currentOrderLine != null) {
                            currentOrderLine.ECS__Product__c = currentProduct;
                            currentOrderLine.ECS__Shipping_Detail__c = currentShipping;
                            orderLines.put(currentOrderLine.ECS__External_Order_Line_ID__c, currentOrderLine);
                        }

                        System.debug('currentPurchasedProduct=' + currentPurchasedProduct);
                        if (currentPurchasedProduct != null) {
                            currentPurchasedProduct.ECS__Product__c = currentProduct;
                            purchasedProducts.put(currentPurchasedProduct.ECS__External_Purchased_Product_ID__c, currentPurchasedProduct);
                        }
                    }

                    handleUpsertResult(Database.upsert(orderLines.values(), ECS__eCommSource_Order_Line__c.ECS__External_Order_Line_ID__c, false));
                    handleUpsertResult(Database.upsert(purchasedProducts.values(), ECS__Products_Purchased__c.ECS__External_Purchased_Product_ID__c, false));

                    System.debug('tax=' + tax);

                    thisOrder.ECS__Tax_Total__c = tax;
                    if (discount != 0) {
                        if (discount > 0) discount *= -1;
                        thisOrder.ECS__Discount_Amount__c = discount;
                    }

                    thisOrder.Marketplace_Facilitator__c = marketplaceFacilitator;

                    // TODO: Figure out Tax Total for Marketplace Facilitator!

                    update thisOrder;
                }
                
            } catch( System.Exception e) {
                
                Util.logException(e, 'Exception parsing Amazon order lines'); 
                
                //Util.sendErrorEmail('Exception handling upsert result for '+UserInfo.getUserName(), '', e);
                System.debug(LoggingLevel.WARN, 'Exception handling upsert result.  exception=' +e) ;
                throw e;
            }
        }
    }
    
    public class AmazonException extends Exception {
    }

    public static void handleUpsertResult(Database.UpsertResult result) {
        List<Database.UpsertResult> resultList = new List<Database.UpsertResult>{result};
        handleUpsertResult(resultList); 
    }

    public static void handleUpsertResult(List<Database.UpsertResult> result) {
        try {
                String error = '';
                for(Database.UpsertResult r : result) {
                    System.debug(LoggingLevel.WARN, 'isSuccess='+r.isSuccess()+' id='+r.getId());
                    for(Database.Error err : r.getErrors()) {
                        System.debug('ID='+r.getId()+'\n');
                        error += 'ID='+r.getId()+'\n';
                        System.debug('errorMessage='+err.getMessage()+'\n');
                        error += 'Error='+err.getMessage() + err.getStatusCode()+'\n';
                        System.debug('errorStatusCode='+err.getStatusCode()+'\n');
                        for(String field : err.getFields()) {
                            System.debug('fieldName='+field);
                            error += 'fieldName='+field+'\n';
                        }
                    }
                }
                if(error!='') {
                   //Util.sendErrorEmail('Upsert Result Error for '+UserInfo.getUserName(), error, null);
                   System.debug(LoggingLevel.WARN, 'Upsert Result Error :'+error);
                }
            
          } catch( System.Exception e) {
            //Util.sendErrorEmail('Exception handling upsert result for '+UserInfo.getUserName(), '', e);
            System.debug(LoggingLevel.WARN, 'Exception handling upsert result.  exception=' +e) ;
            throw e;
          }
    } 
    
   
   public class FbaFulfillmentInventorySummeryResponse{
        public String response {get; set;}
        public boolean isMonth{get;set;}
        public List<AmazonTypesFBA.FbaFulfillmentInventorySummery> ffisList {get; set;}
        public set<string> b2cSkuSet = new set<string>();
        public integer numberProcessed;
        public Amazon_Report__c reportdetail;
        
        public FbaFulfillmentInventorySummeryResponse(String r,boolean isMonth,Amazon_Report__c rpt) {
            this.isMonth = isMonth;
            system.debug('ismonth1'+ismonth);
            response = r;
            numberProcessed = 0;
            reportdetail = rpt;
            processReponse();
        }
        
        public void processReponse() {
            try {
               ffisList = new List<AmazonTypesFBA.FbaFulfillmentInventorySummery>();
              // products.clear();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) { 
                        Integer i=0;
                        
                        AmazonTypesFBA.FbaFulfillmentInventorySummery ffis = New AmazonTypesFBA.FbaFulfillmentInventorySummery();
                        for(String s : line.split('\t')) {
                           
                           //snapshot-date  transaction-type    sku fulfillment-center-id   quantity    disposition
                            if(i==1) ffis.transactionType =  s.trim(); //transaction-type
                            else if(i==2){ ffis.fnsku = s.trim(); //fnsku
                                b2cSkuSet.add(s);
                            }
                            else if(i==3){ ffis.skuName = s.trim(); // sku
                                //b2cSkuSet.add(s);
                            }
                            else if(i==5) ffis.fulfillmentCenterId = s.trim();// fulfillment-center-id
                            else if(i==6) ffis.quantity = Integer.ValueOf(s.trim());// fulfillment-center-id
                           
                           i++;
                          
                        }
                          
                        ffisList.add(ffis);
                    }
                }
            }
        
           catch(System.Exception e) {
              System.debug(LoggingLevel.WARN, 'Error parsing FBA MYI: exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
              throw e;
          }
          
          numberProcessed = FbaFulfillmentInventorySummeryParshing(ffisList,b2cSkuSet);
      }
     
      public Integer FbaFulfillmentInventorySummeryParshing(List<AmazonTypesFBA.FbaFulfillmentInventorySummery> ffisList,set<string> b2cSkuSet){
        try{
            map<string,Integer> skuWithQuantityMap = new map<string,Integer>();
            map<string,ECS__Product__c> proMap = new map<string,ECS__Product__c>();
            list<ECS__Product__c> proList = new list<ECS__Product__c>();
            
            if(b2cSkuSet.Size() > 0)
                proList = [select id,eCommazon__FNSKU__c,Name,eCommazon__Adjustments__c,eCommazon__Customer_Returns__c,eCommazon__Receipts__c,eCommazon__Shipments__c,eCommazon__Vendor_Returns__c from ECS__Product__c where eCommazon__FNSKU__c IN: b2cSkuSet]; 
        
            
            for(AmazonTypesFBA.FbaFulfillmentInventorySummery amzFfis : ffisList){
                String s = amzFfis.fnsku + ':' + amzFfis.transactionType;
                system.debug('**amzFfis.quantity'+amzFfis.quantity);
                if(skuWithQuantityMap.keyset().size() > 0 && skuWithQuantityMap.get(s) != null)
                    skuWithQuantityMap.put(s,skuWithQuantityMap.get(s)+amzFfis.quantity);
                else
                    skuWithQuantityMap.put(s,amzFfis.quantity);
            } 
            
            if(proList.Size() > 0){
                for(ECS__Product__c pro : proList){
                    if(pro.eCommazon__FNSKU__c != null)
                        proMap.put(pro.eCommazon__FNSKU__c.trim(),pro);
                } 
            }
            system.debug('ismonth'+ismonth);
            for(string s : skuWithQuantityMap.keyset()){
                string fnsku = s.substringBefore(':');
                string transactionType = s.substringafter(':');
                if(isMonth == false){
                    if(transactionType == 'Adjustments' && proMap.get(fnsku) != null){
                        if(proMap.get(fnsku).eCommazon__Adjustments__c != null && skuWithQuantityMap.get(s) != null)
                            proMap.get(fnsku).eCommazon__Adjustments__c += skuWithQuantityMap.get(s);
                        else{
                            if(skuWithQuantityMap.get(s) != null)
                                proMap.get(fnsku).eCommazon__Adjustments__c = skuWithQuantityMap.get(s);
                        }
                    }
                    else if(transactionType == 'CustomerReturns' && proMap.get(fnsku) != null){
                        if(proMap.get(fnsku).eCommazon__Customer_Returns__c != null && skuWithQuantityMap.get(s) != null)
                            proMap.get(fnsku).eCommazon__Customer_Returns__c += math.abs(skuWithQuantityMap.get(s));
                        else{
                            if(skuWithQuantityMap.get(s) != null)
                                proMap.get(fnsku).eCommazon__Customer_Returns__c = math.abs(skuWithQuantityMap.get(s));
                        }
                    }
                    else if(transactionType == 'Receipts' && proMap.get(fnsku) != null){
                        if(proMap.get(fnsku).eCommazon__Receipts__c != null && skuWithQuantityMap.get(s) != null)
                            proMap.get(fnsku).eCommazon__Receipts__c += math.abs(skuWithQuantityMap.get(s));
                        else{
                            if(skuWithQuantityMap.get(s) != null)
                                proMap.get(fnsku).eCommazon__Receipts__c = math.abs(skuWithQuantityMap.get(s));
                        }
                    }
                    else if(transactionType == 'Shipments' && proMap.get(fnsku) != null){
                        if(proMap.get(fnsku).eCommazon__Shipments__c != null && skuWithQuantityMap.get(s) != null)
                            proMap.get(fnsku).eCommazon__Shipments__c += math.abs(skuWithQuantityMap.get(s));
                        else{
                            if(skuWithQuantityMap.get(s) != null)
                                proMap.get(fnsku).eCommazon__Shipments__c = math.abs(skuWithQuantityMap.get(s));
                        }
                    }
                    else if(transactionType == 'VendorReturns' &&  proMap.get(fnsku) != null){
                        if(proMap.get(fnsku).eCommazon__Vendor_Returns__c != null && skuWithQuantityMap.get(s) != null)
                            proMap.get(fnsku).eCommazon__Vendor_Returns__c += math.abs(skuWithQuantityMap.get(s));
                        else{
                            if(skuWithQuantityMap.get(s) != null)
                                proMap.get(fnsku).eCommazon__Vendor_Returns__c = math.abs(skuWithQuantityMap.get(s));
                        }
                    }
                }
                else if(isMonth == true){
                    if(transactionType == 'Adjustments' && proMap.get(fnsku) != null && skuWithQuantityMap.get(s) != null){
                        proMap.get(fnsku).eCommazon__Adjustments__c = skuWithQuantityMap.get(s);
                    }
                    else if(transactionType == 'CustomerReturns' && proMap.get(fnsku) != null && skuWithQuantityMap.get(s) != null){
                        proMap.get(fnsku).eCommazon__Customer_Returns__c = math.abs(skuWithQuantityMap.get(s));
                    }
                    else if(transactionType == 'Receipts' && proMap.get(fnsku) != null && skuWithQuantityMap.get(s) != null){
                        proMap.get(fnsku).eCommazon__Receipts__c = math.abs(skuWithQuantityMap.get(s));
                    }
                    else if(transactionType == 'Shipments' && proMap.get(fnsku) != null && skuWithQuantityMap.get(s) != null){
                        proMap.get(fnsku).eCommazon__Shipments__c = math.abs(skuWithQuantityMap.get(s));
                    }
                    else if(transactionType == 'VendorReturns' && proMap.get(fnsku) != null && skuWithQuantityMap.get(s) != null){
                        proMap.get(fnsku).eCommazon__Vendor_Returns__c = math.abs(skuWithQuantityMap.get(s));
                    }
                }
            }
        
            system.debug('**proMap.keyset().size()'+proMap.keyset().size());
            if(proMap.keyset().size() > 0){
                update proMap.values();
                return promap.keyset().size();
            }
            return null;
        }catch(System.Exception e) {
          System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
          Util.logException(e, 'FBA Inventory Event Detail Report',reportdetail.id);
          Return 0;
       } 
   }
 }
  
  public class FbaFeesResponse {
        
        public String response {get; set;}
        
        public Map<String,ECS__Product__c> products {get; set;}
        
        public FbaFeesResponse(String r) {
            response = r;
            processReponse();
        }
        
        public void processReponse() {
            try {
               products = new Map<String,ECS__Product__c>();
              // products.clear();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) { // !line.startsWith('sku')) {
                        Integer i=0;
                        ECS__Product__c p = new ECS__Product__c();
                        p.eCommazon__FBA_Fees__c=0.00;
                      //  Decimal estimated_order_handling_fee_per_order=0.00;
                        // Decimal estimated_pick_pack_fee_per_unit=0.00;
                         // Decimal estimated_weight_handling_fee_per_unit=0.00;
                        for(String s : line.split('\t')) {
                              //if(s!=null && s!='') {
                        //sku    fnsku  asin    product-name    product-group   brand   fulfilled-by    your-price  sales-price longest-side    median-side shortest-side   length-and-girth    unit-of-dimension   item-package-weight unit-of-weight  product-size-tier   currency    estimated-fee   estimated-referral-fee-per-unit estimated-variable-closing-fee  estimated-order-handling-fee-per-order  estimated-pick-pack-fee-per-unit    estimated-weight-handling-fee-per-unit
                                if(i==0) p.Name = p.ECS__External_Product_Id__c = s;//
                                //else if(i==1) p.FNSKU__c = s; // fnsku
                                //else if(i==2) p.ECS__ASIN__c = s; // asin
                                //else if(i==3) p.Amazon_Title__c = s; // product-name
                                //else if(i==4)  // product-group
                                //else if(i==5)  // brand                            
                                //else if(i==6)  // fulfilled-by
                                //else if(i==7)  // your-price
                                //else if(i==8)  // sales-price
                                //else if(i==9)  // longest-side
                                //else if(i==10) // median-side 
                                //else if(i==11) // shortest-side
                                //else if(i==12) // length-and-girth
                                //else if(i==13) // unit-of-dimension
                                //else if(i==14) // item-package-weight
                                //else if(i==15) // unit-of-weight
                                // else if(i==16 && s!=null && s!='') p.eCommazon__FBA_Product_Size_Tier__c = s; // product-size-tier
                                //else if(i==17) // currency
                                //else if(i==18) // estimated-fee
                                //else if(i==19) // estimated-referral-fee-per-unit
                                //else if(i==20) // estimated-variable-closing-fee
                                //else if(i==21 && s!=null && s!='') p.eCommazon__FBA_Fees__c += Decimal.ValueOf(s.trim()); // estimated-order-handling-fee-per-order
                                //else if(i==22 && s!=null && s!='') p.eCommazon__FBA_Fees__c += Decimal.ValueOf(s.trim()); // estimated-pick-pack-fee-per-unit
                                //else if(i==23 && s!=null && s!='') p.eCommazon__FBA_Fees__c += Decimal.ValueOf(s.trim()); // estimated-weight-handling-fee-per-unit
                                else if(i==22 && s!=null && s!='') p.eCommazon__FBA_Fees__c += Decimal.ValueOf(s.trim()); // expected-fulfillment-fee-per-unit
                                i++;
                           // }
                        }
                          
                         //  p.eCommazon__FBA_Fees__c=estimated_order_handling_fee_per_order+estimated_pick_pack_fee_per_unit+estimated_weight_handling_fee_per_unit;
                        if(p.ECS__External_Product_Id__c!=null) products.put(p.ECS__External_Product_Id__c, p);
                    }
                }
                System.Debug('products.size()'+products.size());
                if(products!=null && products.size()>0) {
                    // this will prevent new products from being created from FBA
                    List<ECS__Product__c> prodsToUpdate = new List<ECS__Product__c>();
                    for(ECS__Product__c p : [Select Id, ECS__External_Product_Id__c,eCommazon__FBA_Fees__c From ECS__Product__c Where ECS__External_Product_Id__c IN:products.keySet()]) {
                        ECS__Product__c prod = products.get(p.ECS__External_Product_Id__c);
                        if(prod!=null) prodsToUpdate.add(prod);
                    }
                    if(prodsToUpdate.size()>0) Database.upsert(prodsToUpdate, ECS__Product__c.ECS__External_Product_Id__c, false);
                }
            } catch(System.Exception e) {
                System.debug(LoggingLevel.WARN, 'Error parsing FBA Fees: exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                throw e;
            }
        }
    }
    
    public class FbaMyiReponse {
        
        public String site {get; set;}
        public String response {get; set;}
        
        public Map<String,ECS__Product__c> products {get; set;}
        public List<ECS__Product__c> productList{get; set;}
        
        public FbaMyiReponse(String r, String s) {
            response = r;
            site = s;
            processReponse();
        }
        
        public void processReponse() {
            try {
                productList = New List<ECS__Product__c>();
                products = new Map<String,ECS__Product__c>();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) { // !line.startsWith('sku')) {
                        Integer i=0;
                        ECS__Product__c p = new ECS__Product__c();
                        for(String s : line.split('\t')) {
                            //if(s!=null && s!='') {
                                //sku   fnsku   asin    product-name    condition   your-price  mfn-listing-exists  mfn-fulfillable-quantity    afn-listing-exists  afn-warehouse-quantity  afn-fulfillable-quantity    afn-unsellable-quantity afn-reserved-quantity   afn-total-quantity
                                //sku   fnsku   asin    product-name    condition   your-price  mfn-listing-exists  mfn-fulfillable-quantity    afn-listing-exists  afn-warehouse-quantity  afn-fulfillable-quantity    afn-unsellable-quantity afn-reserved-quantity   afn-total-quantity  per-unit-volume afn-inbound-working-quantity    afn-inbound-shipped-quantity    afn-inbound-receiving-quantity
                                if(i==0) p.Name = p.ECS__External_Product_Id__c = s;
                                else if(i==1) p.FNSKU__c = s; // fnsku
                                else if(i==2) p.ECS__ASIN__c = s; // asin
                                else if(i==3 && s!=null && s!='') {
                                   
                                   String title = s;
                                   
                                   if(title.Length()>255) title = title.substring(0,255); // product-name
                                   
                                   if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.Amazon_Title_CA__c = title; // product-name  
                                   else p.Amazon_Title__c = title;
                                 }
                                //else if(i==4)  // condition
                                else if(i==5 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Current_Price_CA__c = Double.valueOf(s); // your-price
                                    else p.FBA_Current_Price__c = Double.valueOf(s);
                                //else if(i==6)  // mfn-listing-exists
                                //else if(i==7)  // mfn-fulfillable-quantity
                                //else if(i==8)  // afn-listing-exists
                                //else if(i==9)  // afn-warehouse-quantity
                                } else if(i==10 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Have_CA__c = Integer.valueOf(s.trim()); // afn-fulfillable-quantity
                                    else p.FBA_Have__c = Integer.valueOf(s.trim());
                                }  else if(i==11 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Unfulfillable_CA__c = Integer.valueOf(s.trim()); // afn-unsellable-quantity
                                    else p.FBA_Unfulfillable__c = Integer.valueOf(s.trim()); 
                                } else if(i==12 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Reserved_CA__c = Integer.valueOf(s.trim()); // afn-reserved-quantity
                                    else p.FBA_Reserved__c = Integer.valueOf(s.trim());
                                //else if(i==13)  // afn-total-quantity
                                //else if(i==14)  // per-unit-volume
                                } else if(i==15 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Inbound_Working_CA__c = Integer.valueOf(s.trim()); // afn-inbound-working-quantity
                                    else p.FBA_Inbound_Working__c = Integer.valueOf(s.trim());
                                } else if(i==16 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Inbound_Shipped_CA__c = Integer.valueOf(s.trim()); // afn-inbound-shipped-quantity
                                    else p.FBA_Inbound_Shipped__c = Integer.valueOf(s.trim());
                                } else if(i==17 && s!=null && s!='') {
                                    if('CA'.equals(site) || p.ECS__External_Product_Id__c.endsWith('-CAN')) p.FBA_Inbound_Receiving_CA__c = Integer.valueOf(s.trim()); // afn-inbound-receiving-quantity
                                    else p.FBA_Inbound_Receiving__c = Integer.valueOf(s.trim());
                                }
                                
                                i++;
                            //}
                            
                        }
                        System.Debug('***p**'+p);
                        if(p.ECS__External_Product_Id__c!=null && (p.FBA_Current_Price__c!=null || p.FBA_Current_Price_CA__c!=null)) {
                            // Amazon FBA Last Updated?
                            products.put(p.ECS__External_Product_Id__c, p);
                            productList.Add(p);
                        }
                    }
                    System.Debug('productList.Size()='+productList.Size());
                }
                
            } catch(System.Exception e) {
                System.debug(LoggingLevel.WARN, 'Error parsing FBA MYI: exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                throw e;
            }
        }
    }

    public static Integer ProcessFBAInventory(Amazon_Report__c reportdetail, Map<String,ECS__Product__c> products) {
        List<ECS__Product__c> prodsToUpdate = new List<ECS__Product__c>();
        if(products!=null && products.size()>0) {
            // this will prevent new products from being created from FBA
            
            for(ECS__Product__c p : [Select Id, ECS__External_Product_Id__c From ECS__Product__c Where ECS__External_Product_Id__c IN:products.keySet()]) {
                ECS__Product__c prod = products.get(p.ECS__External_Product_Id__c);
                if(prod!=null) prodsToUpdate.add(prod);
            }
            if(prodsToUpdate.size()>0){
                 Database.upsert(prodsToUpdate, ECS__Product__c.ECS__External_Product_Id__c, false);
                  System.Debug('****prodsToUpdate***'+prodsToUpdate.Size());
            }
        }
        Return prodsToUpdate.Size();
    }
    
    public class Order {
        
        public Contact c {get; set;}
        public ECS__Address__c ba {get; set;}
        public ECS__Address__c sa {get; set;}
        public ECS__eCommSource_Order__c ord {get; set;}
        public List<ECS__eCommSource_Order_Line__c> orderLines {get; set;}
        public List<ECS__Products_Purchased__c> pprods {get; set;}
        public List<ECS__Product__c> products {get; set;}
        public ECS__Shipping_Detail__c sd {get; set;}

        public Order() {
            c = new Contact();
            sa = new ECS__Address__c();
            ba = new ECS__Address__c();
            ord = new ECS__eCommSource_Order__c();
            orderLines = new List<ECS__eCommSource_Order_Line__c>();
            pprods = new List<ECS__Products_Purchased__c>();
            products = new List<ECS__Product__c>();
            sd = new ECS__Shipping_Detail__c();
        }
    }
    
    public class FlatFileOrderLastUpdatedResponse {
        
        public String response {get; set;}
        public Map<String, List<AmazonResponseTypes.FlatFileOrderLine>> ffoMap {get; set;}
        public Amazon_Setting__c setting {get; set;}
        public Amazon_Report__c reportdetail;
        
        public List<AmazonResponseTypes.FlatFileOrder> ffoList {get; set;}
        
        public FlatFileOrderLastUpdatedResponse(String r, Amazon_Setting__c amazonSetting, Amazon_Report__c rpt) {
            response = r;
            setting = amazonSetting;
            reportdetail = rpt;
            processReponse();
        }
        
        public void processReponse() {
            try {
              if(!response.Contains('<ErrorResponse') && !response.Contains('RequestThrottled')) {
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                 
                ffoMap = new Map<String, List<AmazonResponseTypes.FlatFileOrderLine>>();

                DateTime syncOrdersAfter = AmazonUtils.syncOrdersAfter();
                
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) {
                        Integer i=0;
                        AmazonResponseTypes.FlatFileOrderLine ffo = new AmazonResponseTypes.FlatFileOrderLine();
                        for(String s : line.split('\t')) {
                            // amazon-order-id  merchant-order-id   purchase-date   last-updated-date   order-status    fulfillment-channel sales-channel   order-channel   url ship-service-level  product-name    sku asin    item-status quantity    currency    item-price  item-tax    shipping-price  shipping-tax    gift-wrap-price gift-wrap-tax   item-promotion-discount ship-promotion-discount ship-city   ship-state  ship-postal-code    ship-country    promotion-ids
                            // amazon-order-id  merchant-order-id   purchase-date   last-updated-date   order-status    fulfillment-channel sales-channel   order-channel   url ship-service-level  product-name    sku asin    item-status quantity    currency    item-price  item-tax    shipping-price  shipping-tax    gift-wrap-price gift-wrap-tax   item-promotion-discount ship-promotion-discount address-type    ship-city   ship-state  ship-postal-code    ship-country    promotion-ids   is-business-order   purchase-order-number   price-designation 
                            if(i==0) ffo.amazonorderid = s; // amazon-order-id
                            else if(i==1)  ffo.merchantorderid = s; // merchant-order-id
                            else if(i==2) ffo.purchasedate = s; // purchase-date
                            else if(i==3) ffo.lastupdateddate = s; // last-updated-date
                            else if(i==4) ffo.orderstatus = s; // order-status
                            else if(i==5) ffo.fulfillmentchannel = s; // fulfillment-channel
                            else if(i==6) ffo.saleschannel = s; // sales-channel
                            else if(i==7) ffo.orderchannel = s; // order-channel
                            else if(i==8) ffo.url = s; // url
                            else if(i==9) ffo.shipservicelevel = s; // ship-service-level
                            else if(i==10) ffo.productname = s; // product-name
                            else if(i==11) ffo.sku = s; // sku
                            else if(i==12) ffo.asin = s; // asin
                            else if(i==13) ffo.itemstatus = s; // item-status
                            else if(i==14) ffo.quantity = s; // quantity
                            else if(i==15) ffo.currencyStr = s; // currency
                            else if(i==16) ffo.itemPrice = s; // item-price
                            else if(i==17) ffo.itemTax = s; // item-tax
                            else if(i==18) ffo.shippingPrice = s; // shipping-price
                            else if(i==19) ffo.shippingTax = s; // shipping-tax
                            else if(i==20) ffo.giftwrapPrice = s; // gift-wrap-price
                            else if(i==21) ffo.giftwrapTax = s; // gift-wrap-tax
                            else if(i==22) ffo.itemPromotionDiscount = s; // item-promotion-discount
                            else if(i==23) ffo.shipPromotionDiscount = s; // ship-promotion-discount
                            else if(i==24) ffo.addressType = s; // address-type
                            else if(i==25) ffo.shipCity= s; // ship-city
                            else if(i==26) ffo.shipState = s; // ship-state
                            else if(i==27) ffo.shipPostalCode = s; // ship-postal-code
                            else if(i==28) ffo.shipCountry = s; // ship-country
                            else if(i==29) ffo.promotionIds = s; // promotion-ids
                            else if(i==30 && s!=null && s!='') ffo.isBusinessOrder = Boolean.valueOf(s); // is-business-order
                            else if(i==31) ffo.purchaseOrderNumber = s; // purchase-order-number
                            else if(i==32) ffo.priceDesignation = s; // price-designation
                            i++;
                        }
                        
                        String orderNumber = ffo.amazonorderid;
                        if(orderNumber.startsWith('S01')) orderNumber = ffo.merchantOrderId;
                        
                        DateTime orderTime = AmazonUtils.getOrderTime(ffo.purchasedate);
                        System.debug('orderTime='+orderTime);
                        System.debug('syncOrdersAfter='+syncOrdersAfter);
                        if(syncOrdersAfter==null || orderTime>syncOrdersAfter) {
                            if(ffoMap.containsKey(orderNumber)) {
                                List<AmazonResponseTypes.FlatFileOrderLine> ffol = ffoMap.get(orderNumber);
                                ffol.add(ffo);
                                ffoMap.put(orderNumber, ffol);
                            } else {
                                ffoMap.put(orderNumber, new List<AmazonResponseTypes.FlatFileOrderLine>{ffo});
                            }
                        }
                    }
                }
                
                System.debug('ffoMap='+ffoMap);
                
                ffoList = new List<AmazonResponseTypes.FlatFileOrder>();
                for(String orderNum : ffoMap.keySet()) {
                    AmazonResponseTypes.FlatFileOrder ffo = new AmazonResponseTypes.FlatFileOrder();
                    ffo.setting = setting;
                    ffo.orderNumber = orderNum;
                    ffo.orderLines = ffoMap.get(orderNum);
                    ffoList.add(ffo);
                }
                System.debug(ffoList);
                
              }
              
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'Flat File Orders Last Updated Report',reportdetail.Id);
            }
        }
    }
        
        public static Integer processFlatFileOrderLines(Amazon_Report__c reportdetail, List<AmazonResponseTypes.FlatFileOrder> ffoList) {
            
            try {
                
                Set<String> orderNumbers = new Set<String>();
                Map<String, String> orderSettingMap = new Map<String,String>();
                List<AmazonResponseTypes.FlatFileOrderLine> ffols = new List<AmazonResponseTypes.FlatFileOrderLine>();
                
                for(AmazonResponseTypes.FlatFileOrder ffo : ffoList) {
                    orderSettingMap.put(ffo.orderNumber, ffo.setting.id);
                    ffols.addAll(ffo.orderLines);
                    orderNumbers.add(ffo.orderNumber);
                }

                Map<String,ECS__eCommSource_Order__c> orderMap = new Map<String,ECS__eCommSource_Order__c>();
                for(ECS__eCommSource_Order__c o : [Select Id, ECS__Order_Status__c, ECS__External_Order_Id__c, ECS__Customer__c,ECS__Tax_Total__c,ECS__Shipping_Total__c, ECS__Customer__r.Name, ECS__Total_Order_Amount__c,
                                                          (Select Id, ECS__Shipping_Detail_External_Id__c From ECS__Shipping_Details__r),
                                                          (Select Id, ECS__Product__r.ECS__External_Product_Id__c, ECS__Unit_Price__c From ECS__Order_Lines__r Where ECS__Unit_Price__c=null OR ECS__Unit_Price__c=0.00)
                                                   From ECS__eCommSource_Order__c 
                                                   Where ECS__External_Order_Id__c IN:orderNumbers]) {
                    orderMap.put(o.ECS__External_Order_Id__c, o);
                }
                System.debug('orderMap='+orderMap);
                
                Map<String,ECS__eCommSource_Order__c> ordersToUpdate = new Map<String,ECS__eCommSource_Order__c>();
                Map<String,ECS__eCommSource_Order_Line__c> orderLinesToUpdate = new Map<String,ECS__eCommSource_Order_Line__c>();
                Map<String,ECS__Shipping_Detail__c> shippingDetailsToUpsert = new Map<String,ECS__Shipping_Detail__c>();
                Set<String> orderNumbersToQ = new Set<String>();
                Set<String> ordernotFound = new Set<String>();
                Boolean updatevalue=true;
                
                for(AmazonResponseTypes.FlatFileOrderLine ffo : ffols) {
                    
                    String orderNumber;
                    
                    if(!ffo.amazonorderid.StartsWith('S01') && !ffo.amazonorderid.StartsWith('REM')) orderNumber = ffo.amazonorderid;
                    else if(ffo.amazonorderid.StartsWith('S01')) orderNumber = ffo.merchantorderid; 
                     
                    if(!orderMap.containsKey(orderNumber)) {
                        orderNumbersToQ.add(orderNumber);
                        if(orderNumber.StartsWith('S01')) ordernotFound.Add(orderNumber);
                    } else {
                        ECS__eCommSource_Order__c order = orderMap.get(orderNumber);
                        
                        if(order.ECS__Order_Lines__r!=null && order.ECS__Order_Lines__r.size()>0 ) {
                            for(ECS__eCommSource_Order_Line__c ol : order.ECS__Order_Lines__r) {
                                if(ffo.itemPrice!=null && ffo.itemPrice!='' && ffo.quantity!=null && ffo.quantity!='' && ol.ECS__Product__r.ECS__External_Product_Id__c!=null && ol.ECS__Product__r.ECS__External_Product_Id__c.equals(ffo.sku)) {
                                    ol.ECS__Unit_Price__c = Double.valueOf(ffo.itemPrice)/Double.valueOf(ffo.quantity);
                                    orderLinesToUpdate.Put(ol.Id,ol);
                                    System.Debug('***orderLinesToUpdate**'+orderLinesToUpdate.Values());
                                }
                            }
                        }
                                            
                        if(order.ECS__Shipping_Details__r!=null && order.ECS__Shipping_Details__r.size()>0) {
                            for(ECS__Shipping_Detail__c sd : order.ECS__Shipping_Details__r) {
                                sd.ECS__Shipping_Carrier__c = ffo.shipservicelevel;
                                // shipping address??
                                shippingDetailsToUpsert.put(sd.Id, sd);
                            }
                        } else { // shipping detail doesn't exist!
                            ECS__Shipping_Detail__c sd = new ECS__Shipping_Detail__c();
                            // shipping address??
                            sd.ECS__Customer__c = order.ECS__Customer__c;
                            sd.ECS__Order__c = order.Id;
                            sd.ECS__Shipping_Carrier__c = ffo.shipservicelevel;
                            sd.ECS__Shipping_Detail_External_Id__c = orderNumber;
                            shippingDetailsToUpsert.put(sd.ECS__Shipping_Detail_External_Id__c, sd);
                        }
                        
                        if('Unshipped'.equals(order.ECS__Order_Status__c) || 'Shipped'.equals(order.ECS__Order_Status__c) || 'Partially Shipped'.equals(order.ECS__Order_Status__c)) {
                            if(order.ECS__Total_Order_Amount__c==null || order.ECS__Total_Order_Amount__c==0) orderNumbersToQ.add(orderNumber);
                            else if(order.ECS__Customer__r.Name.contains('Pending')) orderNumbersToQ.add(orderNumber);
                        }
                    
                        if('Pending'.equals(ffo.orderstatus) && 'Unshipped'.equals(order.ECS__Order_Status__c)) {
                            // Do Nothing!
                        } else {
                            order.ECS__Order_Status__c = ffo.orderstatus;
                        }

                        if(!order.ECS__Customer__r.Name.contains('Pending')) {
                            order.ECS__Payment_Status__c = 'Cleared';
                            order.ECS__Payment_Type__c = 'Amazon';
                        }
                      
                        if(Userinfo.isMultiCurrencyOrganization() && ffo.currencyStr!=null) {
                           order.put('CurrencyIsoCode', ffo.currencyStr);
                        }

                        if(ffo.isBusinessOrder!=null) order.Amazon_Business_Order__c = ffo.isBusinessOrder;
                        order.Amazon_PO_Num__c = ffo.purchaseOrderNumber;
                        
                        // order.ffo.priceDesignation;
                        
                        String itemTaxString = ffo.itemTax;
                        String shippingPriceString = ffo.shippingPrice;
                        
                        if(itemTaxString ==Null || itemTaxString=='') {
                            if(!ordersToUpdate.containsKey(orderNumber)) order.ECS__Tax_Total__c =0.00;
                            else order.ECS__Tax_Total__c +=0.00;
                        } else {
                            if(!ordersToUpdate.containsKey(orderNumber)) order.ECS__Tax_Total__c =Decimal.ValueOf(itemTaxString);
                            else order.ECS__Tax_Total__c +=Decimal.ValueOf(itemTaxString);
                        }
                            
                        if(shippingPriceString ==Null || shippingPriceString=='') {
                            if(!ordersToUpdate.containsKey(orderNumber)) order.ECS__Shipping_Total__c =0.00;
                            else order.ECS__Shipping_Total__c +=0.00;
                        } else {
                            if(!ordersToUpdate.containsKey(orderNumber)) order.ECS__Shipping_Total__c =Decimal.ValueOf(ShippingPriceString);
                            else order.ECS__Shipping_Total__c +=Decimal.ValueOf(ShippingPriceString);
                        }
                        ordersToUpdate.put(orderNumber, order);
                    }
                }
                
                if(ordernotFound.size()>0){
                   ECS__Log__c logRecord = New ECS__Log__c();
                   logRecord.ECS__Log_Name__c = '_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_'+reportdetail.eCommazon__Report_Id__c;
                   logRecord.ECS__Log_Detail__c = 'Orders Below Have Not Been Found on Salesforce:\n'+ordernotFound;
                   logRecord.eCommazon__Amazon_Report__c = reportdetail.Id;
                   insert logRecord;
                   System.Debug('***logRecord***'+logRecord);
                }

                Map<String,Amazon_Queue__c> queueList = new Map<String,Amazon_Queue__c>();                
                for(String orderNumber : orderNumbersToQ) {
                    if(!orderNumber.Contains('REM') && !orderNumber.Contains('Error') && !orderNumber.Contains('ErrorResponse') && !orderNumber.Contains('<') && !orderNumber.Contains('>') ){
                        Amazon_Queue__c aq = new Amazon_Queue__c();
                        aq.eCommazon__Amazon_Setting__c = orderSettingMap.get(orderNumber);
                        aq.eCommazon__Identifier__c = orderNumber;
                        aq.eCommazon__Status__c = 'Pending';
                        aq.eCommazon__Type__c = 'Order';                        
                        if(!queueList.containsKey(aq.eCommazon__Identifier__c)) queueList.put(aq.eCommazon__Identifier__c, aq); 
                    }
                }
                
                if(queueList.size()>0) {
                    ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(queueList.values(), Amazon_Queue__c.eCommazon__Identifier__c, false));
                    System.debug('amazonQueueResult='+r);
                }

                if(ordersToUpdate.size()>0) {
                    update ordersToUpdate.values();
                    System.Debug('***ordersToUpdate.values()**'+ordersToUpdate.values());
                }
                
                if(orderLinesToUpdate.size()>0) {
                     update orderLinesToUpdate.values();
                     System.Debug('***orderLinesToUpdate**'+orderLinesToUpdate);
                }
                
                if(shippingDetailsToUpsert.size()>0) {
                    ECS.Util.Result sdr = ECS.Util.handleUpsertResult(Database.upsert(shippingDetailsToUpsert.values(), ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));
                    System.debug('shippingDetail Result='+sdr);
                }
                
                return ordersToUpdate.size();
                
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'Flat File Orders Last Updated Report',reportdetail.Id);
            }
            return 0;
    }
    
    
 //Code Start........By Devesh  //need to complete it
 
 
 public class GetAllListFullfilmentOrders{
    
    public String response;
    Public GetNextToken GNT;
    
    public GetAllListFullfilmentOrders(String r){
        response = r;
        processReponse();
    }
    
    public void processReponse() {
        
        List<ECS__eCommSource_Order__c> orderList = New List<ECS__eCommSource_Order__c>();
        List<ECS__eCommSource_Order__c> updateOrderList = New List<ECS__eCommSource_Order__c>();
        Map<String,ECS__eCommSource_Order__c> orderMap = New Map<String,ECS__eCommSource_Order__c>();
          
         orderList = [Select id,Name,ECS__Order_Status__c from ECS__eCommSource_Order__c where ECS__Sales_Channel_Lookup__c=:'MCF'];
         if(orderList.Size()>0){
            For(ECS__eCommSource_Order__c order : orderList){
                orderMap.Put(order.Name , order);
            }
          }
          
         GNT = New GetNextToken(New CC_XmlDom(response));
        System.Debug('****GNT**'+GNT.nextToken);
         Dom.Document doc = new Dom.Document();
            doc.load(response);
           Dom.XMLNode resp = doc.getRootElement();
           Dom.XMLNode result;
        
         if(!response.Contains('ListAllFulfillmentOrdersByNextTokenResponse')){
            result = resp.getChildElement('ListAllFulfillmentOrdersResult','http://mws.amazonaws.com/FulfillmentOutboundShipment/2010-10-01/');
          }
         else{
            result = resp.getChildElement('ListAllFulfillmentOrdersByNextTokenResult','http://mws.amazonaws.com/FulfillmentOutboundShipment/2010-10-01/');
         }
           
        Dom.XMLNode result2 = result.getChildElement('FulfillmentOrders','http://mws.amazonaws.com/FulfillmentOutboundShipment/2010-10-01/');
          for(Dom.XMLNode r1 : result2.getChildElements()) {
            
           ECS__eCommSource_Order__c o = New ECS__eCommSource_Order__c();
           
            For(Dom.XMLNode r : r1.getChildElements()){
            
            if(r.getName()=='SellerFulfillmentOrderId' && r.getText() != null && r.getText() != ''){
                String SellerFulfillmentOrderId = r.getText();
                 o = orderMap.get(SellerFulfillmentOrderId);
                System.Debug('****SellerFulfillmentOrderId**'+SellerFulfillmentOrderId);
            }
            if(r.getName()=='FulfillmentOrderStatus' && r.getText() != null && r.getText() != ''){
                String FulfillmentOrderStatus = r.getText();
                if(o != null)
                 o.ECS__Order_Status__c = FulfillmentOrderStatus;
                System.Debug('****FulfillmentOrderStatus**'+FulfillmentOrderStatus);
            }
            
          }
           if(o != null)
            updateOrderList.add(o);
            
        }
        if(updateOrderList.Size()>0)
         Update updateOrderList;
     }
  }  
  
 
  public class GetListInboundShipments{
    
    public String response;
    Public GetNextToken GNT;
    
    public GetListInboundShipments(String r){
        response = r;
        processReponse();
    }
    
    public void processReponse() {
        
        GNT = New GetNextToken(New CC_XmlDom(response));
        System.Debug('****GNT**'+GNT.nextToken);
         Dom.Document doc = new Dom.Document();
            doc.load(response);
           Dom.XMLNode resp = doc.getRootElement();
           Dom.XMLNode result;
        
           if(!response.Contains('ListInboundShipmentsByNextTokenResponse')){
              result = resp.getChildElement('ListInboundShipmentsResult','http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/');
           } else{
             result = resp.getChildElement('ListInboundShipmentsByNextTokenResult','http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/');
           }
     }  
  }  
  
 
  
  public class GetlistInboundShipmentItems{
    
    public String response;
    Public GetNextToken GNT;
    
    public GetlistInboundShipmentItems(String r){
        response = r;
        processReponse();
    }
    
    public void processReponse() {
        
        GNT = New GetNextToken(New CC_XmlDom(response));
        System.Debug('****GNT**'+GNT.nextToken);
         Dom.Document doc = new Dom.Document();
            doc.load(response);
           Dom.XMLNode resp = doc.getRootElement();
           Dom.XMLNode result;
        
         if(!response.Contains('ListInboundShipmentItemsByNextTokenResponse')){
            result = resp.getChildElement('ListInboundShipmentItemsResult','http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/');
          }
         else{
            result = resp.getChildElement('ListInboundShipmentItemsResult','http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/');
         }
         
     }  
  }  
  

  
  public class FBAReimbursements {
        
        public String response {get; set;}
        public List<AmazonResponseTypes.FBAReimbursements> ffoList {get; set;}
        public Map<String,AmazonResponseTypes.FBAReimbursements> ffoMapWithOrder {get; set;}
        public String settingId {get; set;}
        public List<AmazonResponseTypes.FBAReimbursements> ffoListRecordCount {get; set;}
         public Amazon_Report__c reportdetail;
        
        public FBAReimbursements(String r, Id sid, Amazon_Report__c rprt) {
            response = r;
            settingId = sid;
            reportdetail = rprt;
            processReponse();
        }
        
        public void processReponse() {
            try {
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                
                Set<String> orderNumbers = new Set<String>();
                set<String> B2CSKU=New Set<String>();
                Set<String> orderNumberForNew=New Set<String>();
                Set<String> B2COrderlineRecord = New Set<String>();
                Set<String> OrderlineUnique = New Set<String>();
                Set<String> OrderNumberWithId=New Set<String>();
                 
                ffoList = new List<AmazonResponseTypes.FBAReimbursements>();
                ffoMapWithOrder = new Map<String,AmazonResponseTypes.FBAReimbursements>();
                ffoListRecordCount = new List<AmazonResponseTypes.FBAReimbursements>();
                
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) { 
                        Integer i=0;
                        AmazonResponseTypes.FBAReimbursements ffo = new AmazonResponseTypes.FBAReimbursements();
                        for(String s : line.split('\t')) {
                        // approval-date    reimbursement-id case-id    amazon-order-id reason  sku fnsku   asin    product-name    condition   quantity    currency-unit   per-unit-reimbursement-amount   total-reimbursement

                           if(i==0) ffo.approvaldate = AmazonUtils.getDate(s);// approval-date
                            else if(i==1) ffo.reimbursementid = s; // reimbursement-id
                            else if(i==2) ffo.caseid = s; // case-id
                            else if(i==3) {
                                ffo.amazonorderid = s; // amazon-order-id
                                orderNumbers.add(s);
                              } 
                            else if(i==4) ffo.reason = s; // reason
                            else if(i==5) {
                                ffo.sku = s; // sku
                                B2CSKU.Add(ffo.sku.Trim());
                            }
                            else if(i==6) ffo.fnsku = s; // fnsku
                            else if(i==7) ffo.asin = s; // asin
                            else if(i==8) ffo.productname = s; // productname
                            else if(i==9) ffo.condition = s; // condition
                            else if(i==10) ffo.currencyunit = s; // currency-unit
                            else if(i==11) ffo.perunitreimbursementamount = s; // amount-per-unit
                            else if(i==12) ffo.totalreimbursement = s; // amount-total
                            else if(i==13) ffo.quantity = s; // quantity-reimbursed-cash
                            //else if(i==14) ffo.quantityreimbursedinventory = s; // quantity-reimbursed-inventory
                            //else if(i==15) ffo.quantityreimbursedtotal = s; // quantity-reimbursed-total
                           
                            i++;
                        }
                    if(ffo.amazonorderid==Null || ffo.amazonorderid==''  || (ffo.amazonorderid).StartsWith('S01') || ffo.amazonorderid=='000-0000000-0000000'){
                        ffoList.add(ffo);
                        orderNumberForNew.add(ffo.reimbursementid.Trim());
                     }
                    if(ffo.amazonorderid !=Null && ffo.amazonorderid != ''  && !(ffo.amazonorderid).StartsWith('S01') && ffo.amazonorderid!='000-0000000-0000000'){
                        ffoMapWithOrder.Put(ffo.amazonorderid.Trim(),ffo);
                        OrderNumberWithId.Add(ffo.amazonorderid.Trim());
                    }
                    if((ffo.amazonorderid==Null || ffo.amazonorderid==''  || (ffo.amazonorderid).StartsWith('S01') || ffo.amazonorderid=='000-0000000-0000000') && ffo.sku != null && ffo.sku != '' && ffo.reason!='FeeCorrection')
                     {
                       B2COrderlineRecord.Add(ffo.sku);
                       String UniqueId=ffo.sku.Trim()+'-'+ffo.reimbursementid.Trim();
                       OrderlineUnique.Add(UniqueId);
                     }
                      ffoListRecordCount.add(ffo);
                 }
               }
                
                System.debug('ffoList='+ffoList);
                System.debug('orderNumbers='+orderNumbers);
                
                // process ffoList
                
                Map<String,ECS__eCommSource_Order__c> NewOrderMap=New Map<String,ECS__eCommSource_Order__c>();
                Map<String,ECS__eCommSource_Order__c> NewOrderMapWithId=New Map<String,ECS__eCommSource_Order__c>();
                eCommazon__Amazon_Setting__c AmazonContact=New eCommazon__Amazon_Setting__c();
                List<ECS__Product__c> b2cProductList=New List<ECS__Product__c>();
                Map<String,ECS__Product__c> MapB2CWithId=New Map<String,ECS__Product__c>(); 
                List<ECS__eCommSource_Order__c> OrderExists = New List<ECS__eCommSource_Order__c>();
                 Map<String,ECS__eCommSource_Order__c> OldOrderMap=New Map<String,ECS__eCommSource_Order__c>();
                
              if(B2CSKU.Size()>0)
                {
                  b2cProductList=[Select id,name,ECS__External_Product_ID__c from ECS__Product__c where ECS__External_Product_ID__c IN:B2CSKU];
                  
                For(ECS__Product__c b2c : b2cProductList)
                  {
                    MapB2CWithId.put(b2c.ECS__External_Product_ID__c,b2c);
                  }
                }
                
            AmazonContact = [Select id,Name,eCommazon__FBA_Customer__c,eCommazon__FBA_Customer__r.email,eCommazon__Account__c
                            From eCommazon__Amazon_Setting__c
                            Where Id=:settingId AND eCommazon__Amazon_Site__c !='CA'];
        
         
           if(OrderNumberWithId.Size()>0) {
             OrderExists=[Select id,name,ECS__External_Order_ID__c,ECS__Refund_Status__c,eCommazon__FBA_Reimbursed__c,ECS__Internal_Comments__c
                          From ECS__eCommSource_Order__c where ECS__External_Order_ID__c IN:OrderNumberWithId OR Name IN:OrderNumberWithId]; 
               
              if(OrderExists.Size()>0){
                 For(ECS__eCommSource_Order__c order : OrderExists){
                    AmazonResponseTypes.FBAReimbursements o = New AmazonResponseTypes.FBAReimbursements();
                    o = ffoMapWithOrder.get(order.ECS__External_Order_ID__c.Trim());
                    if(o==null) o = ffoMapWithOrder.get(order.Name.Trim());
                      
                    order.ECS__Refund_Status__c = 'FBA Reimbursed';
                    String intrnlComnt;
                       if((o.reason != Null && o.reason != '') && (o.reimbursementid != '' && o.reimbursementid != Null))
                        intrnlComnt = 'Amazon Reason: '+o.reason+'\n'+'Reimbursement Id: '+o.reimbursementid;
                       else if(o.reason != Null && o.reason != '')
                         intrnlComnt = 'Amazon Reason: '+o.reason;
                       else if(o.reimbursementid != Null && o.reimbursementid != '')
                         intrnlComnt = 'Reimbursement Id: '+o.reimbursementid;
                       else
                         intrnlComnt = '';
                         
                      order.ECS__Internal_Comments__c=intrnlComnt;
                  if(OldOrderMap.Keyset().Contains(o.amazonorderid.Trim()))
                     {
                      order.eCommazon__FBA_Reimbursed__c=OldOrderMap.get(o.amazonorderid.Trim()).eCommazon__FBA_Reimbursed__c+Decimal.Valueof(o.totalreimbursement.Trim());
                     }
                    else
                     order.eCommazon__FBA_Reimbursed__c=Decimal.Valueof(o.totalreimbursement.Trim());
                     
                    OldOrderMap.Put(o.amazonorderid,order);    
                 }
               }
            } 
            
           if(OldOrderMap.Values().size()>0) {
                    ECS.Util.Result Odr = ECS.Util.handleUpsertResult(Database.upsert(OldOrderMap.values(), ECS__eCommSource_Order__c.ECS__External_Order_ID__c, false));
                    System.debug('Order Result='+Odr);
                    System.debug('Order Result Size='+OldOrderMap.Values().size());
                }
          
                for(AmazonResponseTypes.FBAReimbursements o :ffoList){
                    ECS__eCommSource_Order__c NewOrder=New ECS__eCommSource_Order__c();
                      NewOrder.Name=o.reimbursementid.trim();
                      NewOrder.ECS__External_Order_ID__c=o.reimbursementid.trim();
                      NewOrder.ECS__Checkout_Status__c='Completed';
                      NewOrder.ECS__Checkout_Time__c=datetime.newInstance(o.approvaldate.year(), o.approvaldate.month(), o.approvaldate.day());
                      NewOrder.ECS__Origin__c='Amazon FBA';
                      NewOrder.ECS__Customer_Email_Address__c=AmazonContact.eCommazon__FBA_Customer__r.email;
                      NewOrder.ECS__Sale_Site__c='Amazon.com';
                      NewOrder.ECS__Payment_Status__c='Cleared';
                      NewOrder.ECS__Payment_Type__c='Amazon Payments';
                      NewOrder.ECS__Status_of_Shipment__c='Shipped';
                      NewOrder.ECS__Refund_Status__c='FBA Reimbursed';
                      NewOrder.ECS__Order_Status__c='Processed';
                      NewOrder.ECS__Order_Time__c=datetime.newInstance(o.approvaldate.year(), o.approvaldate.month(), o.approvaldate.day());
                      //NewOrder.ECS__Client_Order_Identifier__c=o.caseid;
                  if(o.reason != Null && o.reason!= '' && 'FeeCorrection'.equals(o.reason.Trim())){
                      String intrnlComnt;
                      if((o.reason != Null && o.reason != '') && (o.caseid != '' && o.caseid != Null))
                        intrnlComnt = 'Amazon Reason: '+o.reason+'\n'+'Case Id: '+o.caseid+'\n';
                       else if(o.reason != Null && o.reason != '')
                         intrnlComnt = 'Amazon Reason: '+o.reason+'\n';
                       else if(o.caseid != Null && o.caseid != '')
                         intrnlComnt = 'Case Id: '+o.caseid+'\n';
                       else
                         intrnlComnt = '';
                       if((o.sku != Null && o.sku != '') && (o.quantity != '' && o.quantity != Null))
                        intrnlComnt = intrnlComnt+'B2C SKU: '+o.sku+'\n'+'Qty: '+o.quantity;
                       else if(o.sku != Null && o.sku != '')
                         intrnlComnt = intrnlComnt+'B2C SKU: '+o.sku;
                       else if(o.quantity != Null && o.quantity != '')
                         intrnlComnt = intrnlComnt+'Qty: '+o.quantity;
                       else
                         intrnlComnt = intrnlComnt;
                         
                      NewOrder.ECS__Internal_Comments__c=intrnlComnt;   
                 }else{
                      String intrnlComnt;
                       if((o.reason != Null && o.reason != '') && (o.caseid != '' && o.caseid != Null))
                        intrnlComnt = 'Amazon Reason: '+o.reason+'\n'+'Case Id: '+o.caseid;
                       else if(o.reason != Null && o.reason != '')
                         intrnlComnt = 'Amazon Reason: '+o.reason;
                       else if(o.caseid != Null && o.caseid != '')
                         intrnlComnt = 'Case Id: '+o.caseid;
                       else
                         intrnlComnt = '';
                         
                      NewOrder.ECS__Internal_Comments__c=intrnlComnt;
                }    
                      
                      NewOrder.ECS__Customer__c=AmazonContact.eCommazon__FBA_Customer__c;
                      NewOrder.ECS__Account__c=AmazonContact.eCommazon__Account__c;
                  if(NewOrderMap.Keyset().Contains(o.reimbursementid))
                     {
                      NewOrder.ECS__Total_Order_Amount__c=NewOrderMap.get(o.reimbursementid).ECS__Total_Order_Amount__c+Decimal.Valueof(o.totalreimbursement.Trim());
                     }
                    else
                     NewOrder.ECS__Total_Order_Amount__c=Decimal.Valueof(o.totalreimbursement.Trim());
                     
                     NewOrder.eCommazon__FBA_Reimbursed__c=NewOrder.ECS__Total_Order_Amount__c;
                    
                   NewOrderMap.Put(o.reimbursementid,NewOrder);   
                }
                
              if(NewOrderMap.Values().size()>0) {
                    ECS.Util.Result Odr = ECS.Util.handleUpsertResult(Database.upsert(NewOrderMap.values(), ECS__eCommSource_Order__c.ECS__External_Order_ID__c, false));
                    System.debug('Order Result='+Odr);
                    System.debug('Order Result Size='+NewOrderMap.Values().size());
              }
                
             List<ECS__eCommSource_Order__c> InsertedOrder=New List<ECS__eCommSource_Order__c>();
             Map<String,ECS__eCommSource_Order__c> MapWitOrderId=New Map<String,ECS__eCommSource_Order__c>();
             Map<String,ECS__eCommSource_Order_Line__c> MapWitOrderLineId=New Map<String,ECS__eCommSource_Order_Line__c>();
             List<ECS__eCommSource_Order_Line__c> ListOrderLine=New List<ECS__eCommSource_Order_Line__c>();
             Map<String,ECS__eCommSource_Order_Line__c> MapWithoutOrderid=New Map<String,ECS__eCommSource_Order_Line__c>();
             
             InsertedOrder=[Select id,name,ECS__External_Order_ID__c, ECS__Origin__c,
                                (Select id,Name,ECS__External_Order_Line_ID__c, ECS__Sale_Source_ID__c from ECS__Order_Lines__r)
                            From ECS__eCommSource_Order__c where ECS__External_Order_ID__c IN:orderNumberForNew];
              if(InsertedOrder.size()>0){
                 for(ECS__eCommSource_Order__c order : InsertedOrder) {
                    
                    if('Amazon'.equals(order.ECS__Origin__c) || 'Amazon FBA'.equals(order.ECS__Origin__c)) {
                          MapWitOrderId.put(order.ECS__External_Order_ID__c.Trim(), order);
                          
                          for(ECS__eCommSource_Order_Line__c orderline : order.ECS__Order_Lines__r) {
                              MapWitOrderLineId.Put(orderline.ECS__External_Order_Line_ID__c.Trim(),orderline);
                              MapWithoutOrderid.put(orderline.ECS__External_Order_Line_ID__c.Substring(0,orderline.ECS__External_Order_Line_ID__c.lastindexof('-')),orderline);
                          }
                    } else {
                        
                    }
                 }
              }
         
         List<String> orderNotCreated = New List<String>();  
         List<String> orderNotUpdated = New List<String>(); 
         String OrderMessage; 
         OrderMessage=''; 
           
            if(ffoList.size()>InsertedOrder.size())
              {
                for(String s : orderNumberForNew){
                  if(NewOrderMap.get(s)==Null)
                   orderNotCreated.add(s);
              }
               if(orderNotCreated.Size()>0)
                OrderMessage='Orders Below Were Not Upserted.Please check the data. \n'+orderNotCreated+'\n';
           }
          
         if(OrderNumberWithId.Size()>0){
             for(String S : OrderNumberWithId){
                if(!OldOrderMap.Keyset().Contains(S))
                 orderNotUpdated.add(S);
             }
             if(orderNotUpdated.Size()>0)
              OrderMessage=OrderMessage+'Orders Below Were Not Updated. Error: Orders have not yet been inserted. \n'+orderNotUpdated+'\n';
           }
           
             
       
       
       Map<String,ECS__Product__c>  productToInsert=New Map<String,ECS__Product__c>(); 
           
           for(AmazonResponseTypes.FBAReimbursements o :ffoList){
                ECS__Product__c prdct=New ECS__Product__c();
                if(o.sku != null && o.sku != '' && o.reason!='FeeCorrection' && MapB2CWithId.get(o.sku.Trim())==Null){
                     prdct.Name=o.sku.Trim();
                      prdct.ECS__External_Product_ID__c=o.sku.Trim();
                      prdct.eCommazon__FNSKU__c=o.fnsku;
                      prdct.ECS__ASIN__c=o.asin;
                     if(o.productname != Null && o.productname != '' && o.productname.Length()>255){
                      prdct.ECS__Title__c=o.productname.substring(0,255);
                      prdct.eCommazon__Amazon_Title__c=o.productname.substring(0,255);
                     }
                     else{
                      prdct.ECS__Title__c=o.productname;
                      prdct.eCommazon__Amazon_Title__c=o.productname;
                     }
                    
                    productToInsert.put(prdct.ECS__External_Product_ID__c,prdct);
                    System.Debug('***productToInsert.Values()***'+productToInsert.Values()); 
                }
           } 
           
     if(productToInsert.Values().Size()>0)
      {
        Insert productToInsert.Values();
          System.Debug('***productToInsert.Values()***'+productToInsert.Values());
      }                                                      
      
      
      List<ECS__Product__c> productList=New List<ECS__Product__c>();
         
       For(ECS__Product__c ecsprdt : [Select id,name,ECS__External_Product_ID__c from ECS__Product__c where ECS__External_Product_ID__c IN:productToInsert.KeySet()]){
            MapB2CWithId.put(ecsprdt.ECS__External_Product_ID__c,ecsprdt);
          }
     
    List<String> b2cNotCreated = New List<String>();       
  //  String b2cMessage;
          
      if(B2COrderlineRecord.Size()>0)
       {
         For(String S : B2COrderlineRecord)
         {
            if(MapB2CWithId.get(S)==Null)
            b2cNotCreated.Add(S);
         }
        if(b2cNotCreated.Size()>0)
         OrderMessage=OrderMessage+'B2C Below Were Not Upserted.Please check the data. \n'+b2cNotCreated+'\n';
      }
      
          
      Map<String,Integer> uniqueNumbr = New  Map<String,Integer>();  
            
           for(AmazonResponseTypes.FBAReimbursements o :ffoList){
             String UniqueId;
                Integer i=0;
                System.Debug('***MapB2CWithId.get(o.sku.Trim())**'+MapB2CWithId.get(o.sku.Trim()));
                System.Debug('***o.reimbursementid.Trim()**'+o.reimbursementid.Trim());
                System.Debug('***MapWitOrderId.get(o.reimbursementid.Trim())**'+MapWitOrderId.get(o.reimbursementid.Trim()));
              if(MapB2CWithId.get(o.sku.Trim()) != Null && uniqueNumbr.get(MapB2CWithId.get(o.sku.Trim()).ECS__External_Product_ID__c+'-'+o.reimbursementid.Trim())!= Null){
                     i= uniqueNumbr.get(MapB2CWithId.get(o.sku.Trim()).ECS__External_Product_ID__c+'-'+o.reimbursementid.Trim());
                  if(MapB2CWithId.get(o.sku.Trim()) != Null && MapWitOrderId.get(o.reimbursementid.Trim()) != Null){
                   UniqueId = MapB2CWithId.get(o.sku.Trim()).ECS__External_Product_ID__c.Trim()+'-'+MapWitOrderId.get(o.reimbursementid.Trim()).Name+'-'+String.ValueOf(i+1);
                 }
                 }
               else{
                    if(MapB2CWithId.get(o.sku.Trim()) != Null && MapWitOrderId.get(o.reimbursementid.Trim()) != Null)
                     UniqueId = MapB2CWithId.get(o.sku.Trim()).ECS__External_Product_ID__c.Trim()+'-'+MapWitOrderId.get(o.reimbursementid.Trim()).Name+'-'+String.ValueOf(i+1);
                   }
               System.Debug('***UniqueId**'+UniqueId);
               
               if(UniqueId != Null && UniqueId != '' && o.reason!='FeeCorrection' && MapWitOrderLineId.get(UniqueId) == Null){ 
                ECS__eCommSource_Order_Line__c orderline = New ECS__eCommSource_Order_Line__c();
                     orderline.Name=o.sku;
                     orderline.ECS__Customer__c=AmazonContact.eCommazon__FBA_Customer__c;
                     orderline.ECS__Order__c=MapWitOrderId.get(o.reimbursementid.Trim()).Id;
                     orderline.ECS__Quantity__c=Integer.ValueOf(o.quantity.Trim());
                     orderline.ECS__Product_Title__c=o.productname;
                     orderline.ECS__Unit_Price__c=Decimal.Valueof(o.perunitreimbursementamount.Trim());
                     orderline.ECS__Sale_Site__c='Amazon.com';
                     orderline.ECS__Status__c='Processed';
                     orderline.ECS__Sale_Source__c='Amazon';
                     orderline.ECS__Product__c=MapB2CWithId.get(o.sku.Trim()).Id;
                     orderline.ECS__External_Order_Line_ID__c=UniqueId;
                     orderline.ECS__Is_FBA__c = true;
                     
                    uniqueNumbr.put(MapB2CWithId.get(o.sku.Trim()).ECS__External_Product_ID__c+'-'+o.reimbursementid.Trim(),i+1); 
                    MapWitOrderLineId.put(UniqueId,orderline);
                    MapWithoutOrderid.put(UniqueId.Substring(0,UniqueId.lastindexof('-')),orderline);
                    
                   ListOrderLine.Add(orderline);  
                     
                 }
           }
              
            if(ListOrderLine.Size()>0){
               Database.upsert(ListOrderLine, ECS__eCommSource_Order_Line__c.ECS__External_Order_Line_ID__c, false);
              System.Debug('***ListOrderLineSize()***'+ListOrderLine.Size());
           }
          
          List<String> OLNotCreated = New List<String>();  
           
            if(OrderlineUnique.Size()>0)
            {
              For(String S : OrderlineUnique){
                if(!MapWithoutOrderid.KeySet().Contains(S.Trim()))
                 OLNotCreated.Add(S);
               }
             if(OLNotCreated.Size()>0)
              OrderMessage=OrderMessage+'Order Lines Below Were Not Upserted.Please check the data. \n'+OLNotCreated+'\n';
            }
            
           
           if(OrderMessage != Null && OrderMessage != '')
           {
              ECS__Log__c logRecord = New ECS__Log__c();
                 logRecord.ECS__Log_Name__c='_GET_FBA_REIMBURSEMENTS_DATA_'+reportdetail.eCommazon__Report_Id__c;
                 logRecord.ECS__Log_Detail__c=OrderMessage;
                 logRecord.eCommazon__Amazon_Report__c=reportdetail.Id;
                 
                 
               Insert logRecord;
               System.Debug('***logRecord***'+logRecord);
           }
            
            /*   Map<String,ECS__eCommSource_Order__c> orderMap = new Map<String,ECS__eCommSource_Order__c>();
                for(ECS__eCommSource_Order__c o : [Select Id, ECS__Order_Status__c, ECS__External_Order_Id__c, ECS__Customer__c,ECS__Tax_Total__c,ECS__Shipping_Total__c, ECS__Customer__r.Name, ECS__Total_Order_Amount__c,
                                                          (Select Id, ECS__Shipping_Detail_External_Id__c From ECS__Shipping_Details__r),
                                                          (Select Id, ECS__Product__r.ECS__External_Product_Id__c, ECS__Unit_Price__c From ECS__Order_Lines__r Where ECS__Unit_Price__c=null OR ECS__Unit_Price__c=0.00)
                                                   From ECS__eCommSource_Order__c 
                                                   Where ECS__External_Order_Id__c IN:orderNumbers]) {
                    orderMap.put(o.ECS__External_Order_Id__c, o);
                }
                System.debug('orderMap='+orderMap);
                
                Map<String,ECS__eCommSource_Order__c> ordersToUpdate = new Map<String,ECS__eCommSource_Order__c>();
                Map<String,ECS__eCommSource_Order_Line__c> orderLinesToUpdate = new Map<String,ECS__eCommSource_Order_Line__c>();
                Map<String,ECS__Shipping_Detail__c> shippingDetailsToUpsert = new Map<String,ECS__Shipping_Detail__c>();
                Set<String> orderNumbersToQ = new Set<String>();
                Boolean updatevalue=true;
                for(AmazonResponseTypes.FlatFileOrderLine ffo : ffoList) {
                    
                    String orderNumber = ffo.amazonorderid;
                    if(!orderMap.containsKey(orderNumber)) {
                        orderNumbersToQ.add(orderNumber);
                    } else {
                        ECS__eCommSource_Order__c order = orderMap.get(orderNumber);
                        
                        if(order.ECS__Order_Lines__r!=null && order.ECS__Order_Lines__r.size()>0 ) {
                            for(ECS__eCommSource_Order_Line__c ol : order.ECS__Order_Lines__r) {
                                if(ffo.itemPrice!=null && ffo.itemPrice!='' && ffo.quantity!=null && ffo.quantity!='' && ol.ECS__Product__r.ECS__External_Product_Id__c!=null && ol.ECS__Product__r.ECS__External_Product_Id__c.equals(ffo.sku)) {
                                    ol.ECS__Unit_Price__c = Double.valueOf(ffo.itemPrice)/Double.valueOf(ffo.quantity);
                                    orderLinesToUpdate.Put(ol.Id,ol);
                                    System.Debug('***orderLinesToUpdate**'+orderLinesToUpdate.Values());
                                }
                            }
                        }
                                            
                        if(order.ECS__Shipping_Details__r!=null && order.ECS__Shipping_Details__r.size()>0) {
                            for(ECS__Shipping_Detail__c sd : order.ECS__Shipping_Details__r) {
                                sd.ECS__Shipping_Carrier__c = ffo.shipservicelevel;
                                shippingDetailsToUpsert.put(sd.Id, sd);
                            }
                        } else { // shipping detail doesn't exist!
                            ECS__Shipping_Detail__c sd = new ECS__Shipping_Detail__c();
                            sd.ECS__Customer__c = order.ECS__Customer__c;
                            sd.ECS__Order__c = order.Id;
                            sd.ECS__Shipping_Carrier__c = ffo.shipservicelevel;
                            sd.ECS__Shipping_Detail_External_Id__c = orderNumber;
                            shippingDetailsToUpsert.put(sd.ECS__Shipping_Detail_External_Id__c, sd);
                        }
                        
                        if('Unshipped'.equals(order.ECS__Order_Status__c) || 'Shipped'.equals(order.ECS__Order_Status__c) || 'Partially Shipped'.equals(order.ECS__Order_Status__c)) {
                            if(order.ECS__Total_Order_Amount__c==null || order.ECS__Total_Order_Amount__c==0) orderNumbersToQ.add(orderNumber);
                            else if(order.ECS__Customer__r.Name.contains('Pending')) orderNumbersToQ.add(orderNumber);
                        }
                    
                    order.ECS__Order_Status__c = ffo.orderstatus;
                  String itemTaxString;
                    itemTaxString=ffo.itemTax;
                 String ShippigPriceString;
                     ShippigPriceString=ffo.shippingPrice;
                   if(itemTaxString ==Null || itemTaxString=='')
                        {
                        if(!ordersToUpdate.containsKey(orderNumber))
                          order.ECS__Tax_Total__c =0.00;
                        else    
                         order.ECS__Tax_Total__c +=0.00;
                        }
                       else 
                        {
                          if(!ordersToUpdate.containsKey(orderNumber))
                          order.ECS__Tax_Total__c =Decimal.ValueOf(itemTaxString);
                          else
                          order.ECS__Tax_Total__c +=Decimal.ValueOf(itemTaxString);
                        }
                        
                      if(ShippigPriceString ==Null || ShippigPriceString=='')
                        {
                        if(!ordersToUpdate.containsKey(orderNumber))
                          order.ECS__Shipping_Total__c =0.00;
                        else    
                         order.ECS__Shipping_Total__c +=0.00;
                        }
                       else
                        {
                          if(!ordersToUpdate.containsKey(orderNumber))
                          order.ECS__Shipping_Total__c =Decimal.ValueOf(ShippigPriceString);
                          else
                          order.ECS__Shipping_Total__c +=Decimal.ValueOf(ShippigPriceString);
                        }
                     
                     
                        ordersToUpdate.put(orderNumber, order);
                    }
                }

                Map<String,Amazon_Queue__c> queueList = new Map<String,Amazon_Queue__c>();                
                for(String orderNumber : orderNumbersToQ) {
                    Amazon_Queue__c aq = new Amazon_Queue__c();
                    aq.eCommazon__Amazon_Setting__c = settingId;
                    aq.eCommazon__Identifier__c = orderNumber;
                    aq.eCommazon__Status__c = 'Pending';
                    aq.eCommazon__Type__c = 'Order';                        
                    if(!queueList.containsKey(aq.eCommazon__Identifier__c)) queueList.put(aq.eCommazon__Identifier__c, aq); 
                }
                
                if(queueList.size()>0) {
                    ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(queueList.values(), Amazon_Queue__c.eCommazon__Identifier__c, false));
                    System.debug('amazonQueueResult='+r);
                }

                if(ordersToUpdate.size()>0) {
                    update ordersToUpdate.values();
                    System.Debug('***ordersToUpdate.values()**'+ordersToUpdate.values());
                }
                
                if(orderLinesToUpdate.size()>0){
                     update orderLinesToUpdate.values();
                     System.Debug('***orderLinesToUpdate**'+orderLinesToUpdate);
                }
                
                if(shippingDetailsToUpsert.size()>0) {
                    ECS.Util.Result sdr = ECS.Util.handleUpsertResult(Database.upsert(shippingDetailsToUpsert.values(), ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));
                    System.debug('shippingDetail Result='+sdr);
                }
                  */
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'FBA Reimbursements Report',reportdetail.id);
            }
        }
    }
//Code Ended.......................
    // THIS IS NOT USED!!!
    public class FlatFileOrderResponse {
        
        public Map<String, Order> orderMap {get; set;}
        public String response {get; set;}
        public Id accountId {get; set;}
        //public List<ECS__Product__c> products {get; set;}
        
        public FlatFileOrderResponse(String r, Id aid) {
            response = r;
            accountId = aid;
            orderMap = new Map<String,Order>();
            processReponse();
        }
        
        public void processReponse() {
            try {
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;

                List<ECS__Sales_Channel__c> scList = [Select Id, Name From ECS__Sales_Channel__c Where Name='Amazon'];

                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && total++>0) { // !line.startsWith('order-id')) {
                        Integer i=0;
                        Order o = new Order();
                        
                        if(scList!=null &&scList.size()>0) o.ord.ECS__Sales_Channel__c = scList[0].Id;

                        o.ord.ECS__Account__c = accountId;
                        o.c.AccountId = accountId;
                        ECS__eCommSource_Order_Line__c ol = new ECS__eCommSource_Order_Line__c(ECS__Account__c = accountId);
                        ECS__Product__c p = new ECS__Product__c();
                        ECS__Products_Purchased__c pp = new ECS__Products_Purchased__c(ECS__Account__c = accountId);
                        for(String s : line.split('\t')) {
                            //order-id  order-item-id   purchase-date   payments-date   buyer-email buyer-name  buyer-phone-number  sku product-name    quantity-purchased  currency    item-price  item-tax    shipping-price  shipping-tax    ship-service-level  recipient-name  ship-address-1  ship-address-2  ship-address-3  ship-city   ship-state  ship-postal-code    ship-country    ship-phone-number   tax-location-code   tax-location-city   tax-location-county tax-location-state  per-unit-item-taxable-district  per-unit-item-taxable-city  per-unit-item-taxable-county    per-unit-item-taxable-state per-unit-item-non-taxable-district  per-unit-item-non-taxable-city  per-unit-item-non-taxable-county    per-unit-item-non-taxable-state per-unit-item-zero-rated-district   per-unit-item-zero-rated-city   per-unit-item-zero-rated-county per-unit-item-zero-rated-state  per-unit-item-tax-collected-district    per-unit-item-tax-collected-city    per-unit-item-tax-collected-county  per-unit-item-tax-collected-state   per-unit-shipping-taxable-district  per-unit-shipping-taxable-city  per-unit-shipping-taxable-county    per-unit-shipping-taxable-state per-unit-shipping-non-taxable-district  per-unit-shipping-non-taxable-city  per-unit-shipping-non-taxable-county    per-unit-shipping-non-taxable-state per-unit-shipping-zero-rated-district   per-unit-shipping-zero-rated-city   per-unit-shipping-zero-rated-county per-unit-shipping-zero-rated-state  per-unit-shipping-tax-collected-district     per-unit-shipping-tax-collected-city   per-unit-shipping-tax-collected-county  per-unit-shipping-tax-collected-state   item-promotion-discount item-promotion-id   ship-promotion-discount ship-promotion-id   delivery-start-date delivery-end-date   delivery-time-zone  delivery-Instructions   sales-channel
                            if(i==0) { // order-id
                                if(orderMap.containsKey(s)) {
                                    o = orderMap.get(s);
                                }
                                o.ord.Name = o.ord.ECS__External_Order_Id__c = s;
                            } else if(i==1) { // order-item-id
                                pp.ECS__External_Purchased_Product_ID__c = ol.ECS__External_Order_Line_Id__c = s;
                            } else if(i==2 && s!=null && s!='') { // purchase-date
                                o.ord.ECS__Order_Time__c = pp.ECS__Purchase_Date__c = AmazonUtils.getDate(s);
                            } else if(i==3 && s!=null && s!='') { // payments-date
                                o.ord.ECS__Payment_Time__c = AmazonUtils.getDate(s);
                            } else if(i==4) { // buyer-email
                                o.c.Email = o.c.ECS__Customer_External_Id__c = o.ord.ECS__Customer_Email_Address__c = s;
                            } else if(i==5) { // buyer-name
                                if(s.contains(' ')) {
                                    String[] temp = s.split(' ',2);
                                    o.c.FirstName = temp[0];
                                    o.c.LastName = temp[1];
                                } else {
                                    o.c.LastName = s;
                                }
                            } else if(i==6) { // buyer-phone-number
                                o.c.Phone = o.ord.ECS__Phone__c = s;
                            } else if(i==7) { // sku
                                p.Name = p.ECS__External_Product_Id__c = ol.Name = pp.Name = s;
                            } else if(i==8) { // product-name
                                ol.ECS__Product_Title__c = pp.ECS__Product_Title__c = s;
                            } else if(i==9 && s!=null && s!='') { // quantity-purchased
                                ol.ECS__Quantity__c = pp.ECS__Quantity_Purchased__c = Integer.valueOf(s);
                            } else if(i==10) { // currency
                                
                            } else if(i==11 && s!=null && s!='') { // item-price
                                ol.ECS__Unit_Price__c = pp.ECS__Purchase_Price__c = Double.valueOf(s);
                            } else if(i==12 && s!=null && s!='') { // item-tax
                                o.ord.ECS__Tax_Total__c = Double.valueOf(s);
                            } else if(i==13 && s!=null && s!='') { // shipping-price
                                ol.ECS__Shipping__c = Double.valueOf(s);
                            } else if(i==14 && s!=null && s!='') { // shipping-tax
                                // TODO:  Shipping Tax
                            } else if(i==15) { // ship-service-level
                                o.sd.ECS__Shipping_Carrier__c = s;
                            } else if(i==16) { // recipient-name
                                o.sa.Name = o.sd.Name = s;
                                /*if(s.contains(' ')) {
                                    String[] temp = s.split(' ',2);
                                    o.c.FirstName = temp[0];
                                    o.c.LastName = temp[1];
                                } else {
                                    o.c.LastName s;
                                }*/
                            } else if(i==17) { // ship-address-1
                                o.sa.ECS__Address_Line_1__c = s;
                            } else if(i==18) { // ship-address-2
                                o.sa.ECS__Address_Line_2__c = s;
                            } else if(i==19) { // ship-address-3
                                o.sa.ECS__Address_Line_3__c = s;
                            } else if(i==20) { // ship-city
                                o.sa.ECS__City__c = s;
                            } else if(i==21) { // ship-state
                                o.sa.ECS__State_Province_Region__c = s;
                            } else if(i==22) { // ship-postal-code
                                o.sa.ECS__Zip_Postal_Code__c = s;
                            } else if(i==23) { // ship-country
                                o.sa.ECS__Country__c = s;
                            } else if(i==24) { // ship-phone-number
                                o.sa.ECS__Phone_Number__c = s;
                            } else if(i==25) { // tax-location-code
                            
                            } else if(i==26) { // tax-location-city
                            
                            } else if(i==27) { // tax-location-county
                            
                            } else if(i==28) { // tax-location-state
                            
                            } else if(i==29) { // per-unit-item-taxable-district
                            
                            } else if(i==30) { // per-unit-item-taxable-city
                            
                            } else if(i==31) { // per-unit-item-taxable-county
                            
                            } else if(i==32) { // per-unit-item-taxable-state
                            
                            } else if(i==33) { // per-unit-item-non-taxable-district
                            
                            } else if(i==34) { // per-unit-item-non-taxable-city
                            
                            } else if(i==35) { // per-unit-item-non-taxable-county
                            
                            } else if(i==36) { // per-unit-item-non-taxable-state
                            
                            } else if(i==37) { // per-unit-item-zero-rated-district
                            
                            } else if(i==38) { // per-unit-item-zero-rated-city
                            
                            } else if(i==39) { // per-unit-item-zero-rated-county
                            
                            } else if(i==40) { // per-unit-item-zero-rated-state
                            
                            } else if(i==41) { // per-unit-item-tax-collected-district
                            
                            } else if(i==42) { // per-unit-item-tax-collected-city
                            
                            } else if(i==43) { // per-unit-item-tax-collected-county
                            
                            } else if(i==44) { // per-unit-item-tax-collected-state
                            
                            } else if(i==45) { // per-unit-shipping-taxable-district
                            
                            } else if(i==46) { // per-unit-shipping-taxable-city
                            
                            } else if(i==47) { // per-unit-shipping-taxable-county
                            
                            } else if(i==48) { // per-unit-shipping-taxable-state
                            
                            } else if(i==49) { // per-unit-shipping-non-taxable-district
                            
                            } else if(i==50) { // per-unit-shipping-non-taxable-city
                            
                            } else if(i==51) { // per-unit-shipping-non-taxable-county
                            
                            } else if(i==52) { // per-unit-shipping-non-taxable-state
                            
                            } else if(i==53) { // per-unit-shipping-zero-rated-district
                            
                            } else if(i==54) { // per-unit-shipping-zero-rated-city
                            
                            } else if(i==55) { // per-unit-shipping-zero-rated-county
                            
                            } else if(i==56) { // per-unit-shipping-zero-rated-state
                            
                            } else if(i==57) { // per-unit-shipping-tax-collected-district
                            
                            } else if(i==58) { // per-unit-shipping-tax-collected-city
                            
                            } else if(i==59) { // per-unit-shipping-tax-collected-county
                            
                            } else if(i==60) { // per-unit-shipping-tax-collected-state
                            
                            } else if(i==61 && s!=null && s!='') { // item-promotion-discount
                                if(s!=null) o.ord.ECS__Discount_Amount__c = Double.valueOf(s);
                            } else if(i==62) { // item-promotion-id
                            
                            } else if(i==63 && s!=null && s!='') { // ship-promotion-discount
                                ol.ECS__Shipping_Discount__c = Double.valueOf(s);
                            //} else if(i==64) { // ship-promotion-id
                            
                            //} else if(i==65) { // delivery-start-date
                            
                            //} else if(i==66) { // delivery-end-date
                            
                            //} else if(i==67) { // delivery-time-zone
                            
                            } else if(i==68) { // delivery-Instructions
                                o.sd.ECS__Shipping_Instructions__c = s;
                            } else if(i==69) { // sales-channel 
                                o.ord.ECS__Sales_Channel_Lookup__c = s;
                            }
                            i++;
                        }
                        if(ol.ECS__External_Order_Line_ID__c!=null) o.orderLines.add(ol);
                        o.products.add(p);
                        if(pp.ECS__External_Purchased_Product_ID__c!=null) o.pprods.add(pp);
                        orderMap.put(o.ord.Name, o);
                    }
                }
                
                System.debug('orderMap='+orderMap);
                
                Map<String, Contact> contactMap = new Map<String, Contact>();
                Map<String, ECS__Product__c> prodMap = new Map<String, ECS__Product__c>();
                for(Order o : orderMap.values()) {
                    contactMap.put(o.c.Email, o.c);
                    for(ECS__Product__c p : o.products) {
                        prodMap.put(p.ECS__External_Product_Id__c, p);
                    }
                }
                ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(contactMap.values(), Contact.ECS__Customer_External_Id__c, false));
                System.debug('upsert customers result='+r);
                r = ECS.Util.handleUpsertResult(Database.upsert(prodMap.values(), ECS__Product__c.ECS__External_Product_Id__c, false));
                System.debug('upsert products result='+r);
                
                Map<String,ECS__Address__c> addressMap = new Map<String,ECS__Address__c>();
                for(Order o : orderMap.values()) {
                    o.sa.ECS__Customer__c = contactMap.get(o.c.ECS__Customer_External_Id__c).Id;
                    o.sa.ECS__External_Address_Id__c = o.ord.ECS__External_Order_Id__c+'-s';
                    addressMap.put(o.sa.ECS__External_Address_Id__c, o.sa);
                    // how do we handle billing address??
                }
                r = ECS.Util.handleUpsertResult(Database.upsert(addressMap.values(), ECS__Address__c.ECS__External_Address_Id__c, false));
                System.debug('upsert addresses result='+r);

                Map<String,ECS__eCommSource_Order__c> orderMap2 = new Map<String,ECS__eCommSource_Order__c>();
                for(Order o : orderMap.values()) {
                    o.ord.ECS__Customer__c = contactMap.get(o.c.ECS__Customer_External_Id__c).Id;
                    orderMap2.put(o.ord.ECS__External_Order_Id__c, o.ord);
                }
                r = ECS.Util.handleUpsertResult(Database.upsert(orderMap2.values(), ECS__eCommSource_Order__c.ECS__External_Order_Id__c, false));
                System.debug('upsert orders result='+r);
                
                // order lines and products purchased
                List<ECS__eCommSource_Order_Line__c> olList = new List<ECS__eCommSource_Order_Line__c>();
                List<ECS__Products_Purchased__c> ppList = new List<ECS__Products_Purchased__c>();
                List<ECS__Shipping_Detail__c> sdList = new List<ECS__Shipping_Detail__c>();
                for(Order o : orderMap.values()) {
                    System.debug('o.ord.ECS__External_Order_Id__c='+o.ord.ECS__External_Order_Id__c);
                    o.sd.ECS__Order__c = orderMap2.get(o.ord.ECS__External_Order_Id__c).Id;
                    o.sd.ECS__Customer__c = contactMap.get(o.c.ECS__Customer_External_Id__c).Id;
                    o.sd.ECS__Shipping_Detail_External_Id__c = o.ord.ECS__External_Order_Id__c;
                    o.sd.ECS__Shipping_Address__c = addressMap.get(o.ord.ECS__External_Order_Id__c).Id;
                    if(o.sd.ECS__Shipping_Detail_External_Id__c!=null) sdList.add(o.sd);
                    
                    for(ECS__eCommSource_Order_Line__c ol : o.orderLines) {
                        ol.ECS__Customer__c = o.sd.ECS__Customer__c;
                        ol.ECS__Order__c = o.sd.ECS__Order__c;
                        ol.ECS__Product__c = prodMap.get(ol.Name).Id;
                        olList.add(ol);
                    }
                    
                    for(ECS__Products_Purchased__c pp : o.pprods) {
                        pp.ECS__Contact__c = o.sd.ECS__Customer__c;
                        pp.ECS__Order__c = o.sd.ECS__Order__c;
                        pp.ECS__Product__c = prodMap.get(pp.Name).Id;
                        
                        // pp.ECS__External_Purchased_Product_ID__c = o.ord.ECS__External_Order_Id__c+ ASIN??
                        
                        ppList.add(pp);
                    }
                }
                r = ECS.Util.handleUpsertResult(Database.upsert(olList, ECS__eCommSource_Order_Line__c.ECS__External_Order_Line_Id__c, false));
                System.debug('upsert order lines result='+r);
                
                //r = ECS.Util.handleUpsertResult(Database.upsert(ppList, ECS__Products_Purchased__c.ECS__External_Purchased_Product_ID__c, false));
                //System.debug('upsert products purchased result='+r);
                
                r = ECS.Util.handleUpsertResult(Database.upsert(sdList, ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));
                System.debug('upsert shipping details result='+r);
                
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'Flat File Orders Report');
            }
        }
    }

    public class FbaReturnsReponse {
        
        public String response {get; set;}
        public List<AmazonResponseTypes.Rma> rmas {get; set;}
        public Amazon_Setting__c setting {get; set;}
        public Set<String> missingOrderIds {get; set;}
        public Amazon_Report__c report {get; set;}
        
        public FbaReturnsReponse(Amazon_Setting__c s, String r ,Amazon_Report__c ar) {
            response = r;
            setting = s;
            report=ar;
            processReponse();
        }
        
        public void processReponse() {
            try {
                rmas = new List<AmazonResponseTypes.Rma>();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                Integer total = 0;
                while(ri.hasNext()) {
                    String line = ri.next();
                    AmazonResponseTypes.Rma rma = new AmazonResponseTypes.Rma();
                    if(line!=null && total++>0) { // !line.startsWith('return-date')) {
                        Integer i=0;
                        for(String s : line.split('\t')) {
                            //return-date   order-id    sku asin    fnsku   product-name    quantity    fulfillment-center-id   detailed-disposition    reason

                            if(i==0) rma.returnDate = AmazonUtils.getDate(s);// return-date 
                            else if(i==1) rma.orderId = s; // order-id  
                            else if(i==2) rma.sku = s; // sku 
                            else if(i==3) rma.asin = s; // asin 
                            else if(i==4) rma.fnsku = s; // fnsku   
                            else if(i==5) rma.productName = s;// product-name   
                            else if(i==6 && s!=null && s!='') rma.quantity = Integer.valueOf(s);// quantity 
                            else if(i==7) rma.fulfillmentCenterId = s;// fulfillment-center-id  
                            else if(i==8) rma.detailedDisposition = s;// detailed-disposition   
                            else if(i==9) rma.returnReason = s;// reason  
                            else if(i==10) rma.Status = s;  //status  
                            i++;
                        }
                        rmas.add(rma);
                    }
                }
                
                missingOrderIds = new Set<String>();
                
                Set<String> orderIds = new Set<String>();
                Set<String> order2Ids = new Set<String>();
                //Set<String> skus = new Set<String>();
                if(rmas.size()>0) {
                    for(AmazonResponseTypes.Rma rma : rmas) {
                        orderIds.add(rma.orderId);
                        order2Ids.add(rma.orderId+'-2');
                        //skus.add(rma.sku);
                    }
                }
                
                Map<String, ECS__eCommSource_Order__c> orderMap = new Map<String, ECS__eCommSource_Order__c>();
                Map<String, ECS__eCommSource_Order__c> orderMap2 = new Map<String, ECS__eCommSource_Order__c>();
                for(ECS__eCommSource_Order__c o : [Select Id, Name, ECS__External_Order_Id__c, ECS__Customer__c, 
                                                         (Select Id, ECS__Product__c, ECS__Product__r.ECS__External_Product_Id__c From ECS__Order_Lines__r) 
                                                   From ECS__eCommSource_Order__c
                                                   Where ECS__External_Order_Id__c IN :orderIds OR Name IN :orderIds]) {
                    orderMap.put(o.ECS__External_Order_Id__c, o);
                    orderMap2.put(o.Name, o);
                }

                for(ECS__eCommSource_Order__c o : [Select Id, Name, ECS__External_Order_Id__c, ECS__Customer__c, 
                                                         (Select Id, ECS__Product__c, ECS__Product__r.ECS__External_Product_Id__c From ECS__Order_Lines__r) 
                                                   From ECS__eCommSource_Order__c
                                                   Where ECS__External_Order_Id__c IN :order2Ids OR Name IN :order2Ids]) {
                    orderMap.put(o.ECS__External_Order_Id__c, o);
                    orderMap2.put(o.Name, o);
                }
                   
                if(rmas.size()>0) {

                    for(AmazonResponseTypes.Rma ra : rmas) {
                        ECS__eCommSource_Order__c o = orderMap.get(ra.orderId); 
                        if(o==null) o = orderMap2.get(ra.orderId); 
                        if(o==null) missingOrderIds.add(ra.orderId);
                    }
                    
                    // Get Missing Orders!
                    //if(missingOrderIds.size()>0) orderMap = AmazonService.getMissingOrders(orderMap, setting, missingOrderIds);
                    
                    Map<String,ECS__RMA__c> rmasToUpsert = new Map<String,ECS__RMA__c>();
                    for(AmazonResponseTypes.Rma ra : rmas) {
                        ECS__eCommSource_Order__c o = orderMap.get(ra.orderId);
                        if(o==null) o = orderMap2.get(ra.orderId);
                        if(o!=null && !rmasToUpsert.containsKey(ra.orderId)) {
                            ECS__RMA__c rma = new ECS__RMA__c();
                            rma.ECS__Customer__c = o.ECS__Customer__c;
                            rma.ECS__Order__c = o.Id;
                            rma.ECS__External_RMA_Id__c = ra.orderId;
                            rma.ECS__Status__c = 'New';
                            rma.ECS__Origin__c = 'Amazon';
                            rmasToUpsert.put(ra.orderId, rma);
                        }

                        ECS__eCommSource_Order__c o2 = orderMap.get(ra.orderId+'-2');
                        if(o2==null) o2 = orderMap2.get(ra.orderId+'-2');
                        if(o2!=null && !rmasToUpsert.containsKey(ra.orderId+'-2')) {
                            ECS__RMA__c rma = new ECS__RMA__c();
                            rma.ECS__Customer__c = o2.ECS__Customer__c;
                            rma.ECS__Order__c = o2.Id;
                            rma.ECS__External_RMA_Id__c = ra.orderId+'-2';
                            rma.ECS__Status__c = 'New';
                            rma.ECS__Origin__c = 'Amazon';
                            rmasToUpsert.put(ra.orderId+'-2', rma);
                        }
                    }
                    ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(rmasToUpsert.values(), ECS__RMA__c.ECS__External_RMA_Id__c, false));
                    System.debug('upsert rma lines result='+r);
                    
                    Map<String, ECS__RMA__c> rmaMap = new Map<String, ECS__RMA__c>();
                    for(ECS__RMA__c rma : [Select Id, ECS__External_RMA_Id__c From ECS__RMA__c Where ECS__External_RMA_Id__c IN:rmasToUpsert.keySet()]) {
                        rmaMap.put(rma.ECS__External_RMA_Id__c, rma);
                    }
                   
                   Set<String> OrderIdNotFound = New Set<String>();         
                    Map<String, CloudConversion__RMA_Line__c> rmaLinesToUpsert = new Map<String, CloudConversion__RMA_Line__c>();
                    for(AmazonResponseTypes.Rma ra : rmas) {
                        ECS__eCommSource_Order__c o = orderMap.get(ra.orderId);
                        if(o==null) o = orderMap2.get(ra.orderId);

                        ECS__eCommSource_Order__c o2 = orderMap.get(ra.orderId+'-2');
                        if(o2==null) o2 = orderMap2.get(ra.orderId+'-2');

                        if(o!=null) {
                            CloudConversion__RMA_Line__c rmaLine = new CloudConversion__RMA_Line__c();
                            rmaLine.CloudConversion__Customer__c = o.ECS__Customer__c;
                            
                            if(o.ECS__Order_Lines__r!=null && o.ECS__Order_Lines__r.size()>0) {
                                for(ECS__eCommSource_Order_Line__c ol : o.ECS__Order_Lines__r) {
                                    if(ra.sku.equals(ol.ECS__Product__r.ECS__External_Product_Id__c)) {
                                       if(rmaMap.containsKey(ra.orderId)) rmaLine.CloudConversion__RMA__c = rmaMap.get(ra.orderId).Id;
                                       rmaLine.CloudConversion__Original_Order__c = o.Id;
                                       rmaLine.CloudConversion__Original_Order_Line__c = ol.Id;
                                       rmaLine.CloudConversion__Original_Product__c = ol.ECS__Product__c;
                                       rmaLine.CloudConversion__External_RMA_Number__c = ra.orderId+'-'+ra.sku;
                                    }
                                }
                            }
                            
                            if(o2!=null) {
                                if(o2.ECS__Order_Lines__r!=null && o2.ECS__Order_Lines__r.size()>0) {
                                    for(ECS__eCommSource_Order_Line__c ol : o2.ECS__Order_Lines__r) {
                                        if(ra.sku.equals(ol.ECS__Product__r.ECS__External_Product_Id__c)) {
                                            if(rmaMap.containsKey(ra.orderId+'-2')) rmaLine.CloudConversion__RMA__c = rmaMap.get(ra.orderId+'-2').Id;
                                            rmaLine.CloudConversion__Original_Order__c = o2.Id;
                                            rmaLine.CloudConversion__Original_Order_Line__c = ol.Id;
                                            rmaLine.CloudConversion__Original_Product__c = ol.ECS__Product__c;
                                            rmaLine.CloudConversion__External_RMA_Number__c = ra.orderId+'-2-'+ra.sku;
                                        }
                                    }
                                }
                            } 
                            
                            if(rmaLine.CloudConversion__RMA__c!=null) {
                                rmaLine.CloudConversion__Returned_Quantity__c = ra.quantity;
                                rmaLine.CloudConversion__Return_Reason__c = ra.returnReason;
                                rmaLine.CloudConversion__Item_Condition__c = ra.detailedDisposition;
                                rmaLine.CloudConversion__Origin__c = 'Amazon';
                                rmaLine.eCommazon__FBA_Return_Status__c = ra.status;  // added by vidhi
                                rmaLine.CloudConversion__Received_Time__c = ra.returnDate;  // added by vidhi
                                
                                for(Integer i=1; i<20; i++) {
                                    if(!rmaLinesToUpsert.containsKey(rmaLine.CloudConversion__External_RMA_Number__c)) {
                                        rmaLinesToUpsert.put(rmaLine.CloudConversion__External_RMA_Number__c, rmaLine);
                                        break;
                                    } else {
                                        rmaLine.CloudConversion__External_RMA_Number__c += '-'+i;
                                    }
                                }
                            }
                            
                        } else {
                            OrderIdNotFound.Add(ra.orderId);
                            System.debug('Order '+ra.orderId+' for RMA '+ra+' not found!');
                        }
                    }
                    ECS.Util.Result ra = ECS.Util.handleUpsertResult(Database.upsert(rmaLinesToUpsert.values(), CloudConversion__RMA_Line__c.CloudConversion__External_RMA_Number__c, false));
                    System.debug('upsert rma lines result='+ra);
                    
                    if(OrderIdNotFound.Size()>0){
                        String Message='RMA Lines Below Not Created:\n'+OrderIdNotFound;
                        ECS__Log__c logRecord = New ECS__Log__c();
                         logRecord.ECS__Log_Name__c='Returns Report';
                         logRecord.ECS__Log_Detail__c=Message;
                         logRecord.eCommazon__Amazon_Report__c=report.id;
                            
                           Insert logRecord;
                         System.Debug('***logRecord***'+logRecord);
                    }
                }
                
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'Returns Report',report.id);
            }
        }
    }

    public class FbaShipmentsReponse {
        
        public String response {get; set;}
        public List<AmazonResponseTypes.FbaShipment> fbaShipments {get; set;}
        public Set<String> missingOrderIds {get; set;}
        //public Amazon_Setting__c setting {get; set;}
        public Amazon_Report__c reportdetail;
        
        public FbaShipmentsReponse(String r, Amazon_Report__c rpot) {
            response = r;
            //setting = s;
            reportdetail = rpot;
            processReponse();
        }
        
        public void processReponse() {
            try {
                missingOrderIds = new Set<String>();
                fbaShipments = new List<AmazonResponseTypes.FbaShipment>();
                //List<String> lines = response.split('\n');
                //for(Integer j=1; j<lines.size(); j++) {
                if(!response.Contains('<ErrorResponse') && !response.Contains('RequestThrottled')) {
                    Utility_RowIterator ri = new Utility_RowIterator(response);
                    Integer total = 0;
                    while(ri.hasNext()) {
                        String line = ri.next();
                        if(line!=null && total++>0) { // !line.startsWith('amazon-order-id')) {
                            AmazonResponseTypes.FbaShipment fs = new AmazonResponseTypes.FbaShipment();
                            Integer i=0;
                            for(String s : line.split('\t')) {
                                //amazon-order-id   merchant-order-id   shipment-id shipment-item-id    amazon-order-item-id    merchant-order-item-id  purchase-date   payments-date   shipment-date   reporting-date  buyer-email buyer-name  buyer-phone-number  sku product-name    quantity-shipped    currency    item-price  item-tax    shipping-price  shipping-tax    gift-wrap-price gift-wrap-tax   ship-service-level  recipient-name  ship-address-1  ship-address-2  ship-address-3  ship-city   ship-state  ship-postal-code    ship-country    ship-phone-number   bill-address-1  bill-address-2  bill-address-3  bill-city   bill-state  bill-postal-code    bill-country    item-promotion-discount ship-promotion-discount carrier tracking-number estimated-arrival-date  fulfillment-center-id   fulfillment-channel sales-channel
    
                                if(i==0) fs.amazonorderid = s;
                                else if(i==1) fs.merchantorderid = s; 
                                else if(i==2) fs.shipmentid = s;
                                else if(i==3) fs.shipmentitemid = s;
                                else if(i==4) fs.amazonorderitemid = s;
                                else if(i==5) fs.merchantorderitemid = s;
                                else if(i==6 && s!=null && s!='') fs.purchasedate = AmazonUtils.getDate(s);
                                else if(i==7 && s!=null && s!='') fs.paymentsdate = AmazonUtils.getDate(s);
                                else if(i==8 && s!=null && s!='') fs.shipmentdate = AmazonUtils.getDate(s);
                                else if(i==9 && s!=null && s!='') fs.reportingdate = AmazonUtils.getDate(s);
                                else if(i==10) fs.buyeremail = s;
                                else if(i==11) fs.buyername = s;
                                else if(i==12) fs.buyerphonenumber = s;
                                else if(i==13) fs.sku = s;
                                else if(i==14) fs.productname = s;
                                else if(i==15 && s!=null && s!='') fs.quantityshipped = Integer.valueOf(s);
                                else if(i==16) fs.currencyStr = s;
                                else if(i==17 && s!=null && s!='') fs.itemprice = Double.valueOf(s);
                                else if(i==18 && s!=null && s!='') fs.itemtax = Double.valueOf(s);
                                else if(i==19 && s!=null && s!='') fs.shippingprice = Double.valueOf(s);
                                else if(i==20 && s!=null && s!='') fs.shippingtax = Double.valueOf(s);
                                else if(i==21 && s!=null && s!='') fs.giftwrapprice = Double.valueOf(s);
                                else if(i==22 && s!=null && s!='') fs.giftwraptax = Double.valueOf(s);
                                else if(i==23) fs.shipservicelevel = s;
                                else if(i==24) fs.recipientname = s;
                                else if(i==25) fs.shipaddress1 = s;
                                else if(i==26) fs.shipaddress2 = s;
                                else if(i==27) fs.shipaddress3 = s;
                                else if(i==28) fs.shipcity = s;
                                else if(i==29) fs.shipstate = s;
                                else if(i==30) fs.shippostalcode = s;
                                else if(i==31) fs.shipcountry = s;
                                else if(i==32) fs.shipphonenumber = s;
                                else if(i==33) fs.billaddress1 = s;
                                else if(i==34) fs.billaddress2 = s;
                                else if(i==35) fs.billaddress3 = s;
                                else if(i==36) fs.billcity = s;
                                else if(i==37) fs.billstate = s;
                                else if(i==38) fs.billpostalcode = s;
                                else if(i==39) fs.billcountry = s;
                                else if(i==40 && s!=null && s!='') fs.itempromotiondiscount = Double.valueOf(s);
                                else if(i==41 && s!=null && s!='') fs.shippromotiondiscount = Double.valueOf(s);
                                else if(i==42) fs.carrier = s;
                                else if(i==43) fs.trackingnumber = s;
                                else if(i==44 && s!=null && s!='') fs.estimatedarrivaldate = AmazonUtils.getDate(s);
                                else if(i==45) fs.fulfillmentcenterid = s;
                                else if(i==46) fs.fulfillmentchannel = s;
                                else if(i==47) fs.saleschannel = s;
                                i++;
                            }
                            fbaShipments.add(fs);
                        }
                    }
                    
                    /*if(fbaShipments.size()>0) {
                       Set<String> orderIds = new Set<String>();
                       for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                          if(!fs.amazonorderid.StartsWith('S01'))
                           orderIds.add(fs.amazonorderid);
                          else if(fs.amazonorderid.StartsWith('S01'))
                            orderIds.add(fs.merchantorderid);
                       }
                       
                        Map<String, ECS__eCommSource_Order__c> orderMap = new Map<String, ECS__eCommSource_Order__c>();
                        for(ECS__eCommSource_Order__c o : [Select Id, ECS__External_Order_Id__c, ECS__Account__c, ECS__Customer__c, ECS__Shipping_Detail__c,
                                                                       (Select Id, ECS__Shipping_Detail_External_Id__c From ECS__Shipping_Details__r) 
                                                           From ECS__eCommSource_Order__c
                                                           Where ECS__External_Order_Id__c IN :orderIds]) {
                            orderMap.put(o.ECS__External_Order_Id__c, o);
                        }
                        
                        for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                           ECS__eCommSource_Order__c o ;
                            if(!fs.amazonorderid.StartsWith('S01'))
                                o = orderMap.get(fs.amazonorderid);
                            else if(fs.amazonorderid.StartsWith('S01'))
                                o = orderMap.get(fs.merchantorderid); 
                            if(o==null) {
                                missingOrderIds.add(fs.amazonorderid);
                            }
                        }
                        
                        // Get Missing Orders!
                        //if(missingOrderIds.size()>0) orderMap = AmazonService.getMissingOrders(orderMap, setting, missingOrderIds);
                        
                        System.debug('orderMap='+orderMap);
                        
                        Map<String,ECS__Shipping_Detail__c> sdMap = new Map<String,ECS__Shipping_Detail__c>();
                        for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                            
                           ECS__eCommSource_Order__c o ;
                            if(!fs.amazonorderid.StartsWith('S01'))
                                o = orderMap.get(fs.amazonorderid);
                            else if(fs.amazonorderid.StartsWith('S01'))
                                o = orderMap.get(fs.merchantorderid); 
                            
                            if(o!=null) {
                                ECS__Shipping_Detail__c sd;
                                if(o.ECS__Shipping_Details__r!=null && o.ECS__Shipping_Details__r.size()==1) {
                                    sd = o.ECS__Shipping_Details__r[0];
                                } else {
                                    sd = new ECS__Shipping_Detail__c();
                                    sd.Name = sd.ECS__Shipping_Detail_External_Id__c = fs.amazonorderid;
                                    sd.ECS__Order__c = o.Id;
                                    sd.ECS__Customer__c = o.ECS__Customer__c;
                                }
                                sd.ECS__Status_of_Shipment__c = 'Shipped';
                                sd.ECS__Shipping_Carrier__c = fs.carrier;
                                sd.ECS__Tracking_Number__c = fs.trackingnumber;
                                sd.ECS__Shipped_Time__c = fs.shipmentdate;
                                if(fs.estimatedarrivaldate != null) sd.ECS__Estimated_Delivery__c = date.newInstance(fs.estimatedarrivaldate.year(), fs.estimatedarrivaldate.month(), fs.estimatedarrivaldate.day()); 
                                sdMap.put(fs.amazonorderid, sd);
                                
                            } else {
                                System.debug('Order '+fs.amazonorderid+' for FbaShipment '+fs+' not found!');
                            }
                        }
                        if(sdMap.size()>0) {
                            ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(sdMap.values(), ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));
                            System.debug('upsert feedback result='+r);
                        }   
                    }
                    
                   if(missingOrderIds.Size()>0){
                     ECS__Log__c logRecord = New ECS__Log__c();
                     logRecord.ECS__Log_Name__c='_GET_AMAZON_FULFILLED_SHIPMENTS_DATA_'+reportdetail.eCommazon__Report_Id__c;
                     logRecord.ECS__Log_Detail__c='Orders Below Have Not Been Found on Salesforce:\n'+missingOrderIds;
                     logRecord.eCommazon__Amazon_Report__c=reportdetail.Id;
                     
                      Insert logRecord;
                     System.Debug('***logRecord***'+logRecord);
                  }
                    */
              }   
                
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'FBA Shipments Report',reportdetail.id);
            }
        }
    }

    public Static Integer ProcessFbaShipmentsReponse(Amazon_Report__c reportdetail,List<AmazonResponseTypes.FbaShipment> FbaShipments){
        Set<String> missingOrderIds = new Set<String>();
         Map<String,ECS__Shipping_Detail__c> sdMap = new Map<String,ECS__Shipping_Detail__c>();
        try {
               if(fbaShipments.size()>0) {
                   Set<String> orderIds = new Set<String>();
                   for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                      if(!fs.amazonorderid.StartsWith('S01'))
                       orderIds.add(fs.amazonorderid);
                      else if(fs.amazonorderid.StartsWith('S01'))
                        orderIds.add(fs.merchantorderid);
                   }
                   
                    Map<String, ECS__eCommSource_Order__c> orderMap = new Map<String, ECS__eCommSource_Order__c>();
                    Map<String, ECS__eCommSource_Order__c> orderMap2 = new Map<String, ECS__eCommSource_Order__c>();
                    for(ECS__eCommSource_Order__c o : [Select Id, Name, ECS__External_Order_Id__c, ECS__Account__c, ECS__Customer__c, ECS__Shipping_Detail__c,
                                                                   (Select Id, ECS__Shipping_Detail_External_Id__c From ECS__Shipping_Details__r) 
                                                       From ECS__eCommSource_Order__c
                                                       Where ECS__External_Order_Id__c IN :orderIds OR Name IN :orderIds]) {
                        orderMap.put(o.ECS__External_Order_Id__c, o);
                        orderMap2.put(o.Name, o);
                    }
                    
                    for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                        ECS__eCommSource_Order__c o;
                        if(!fs.amazonorderid.StartsWith('S01')) {
                            o = orderMap.get(fs.amazonorderid);
                            if(o==null) o = orderMap2.get(fs.amazonorderid);
                        } else if(fs.amazonorderid.StartsWith('S01')) {
                            o = orderMap.get(fs.merchantorderid); 
                            if(o==null) o = orderMap2.get(fs.merchantorderid);
                        }
                        
                        if(o==null) {
                            missingOrderIds.add(fs.amazonorderid);
                        }
                    }
                    
                    // Get Missing Orders!
                    //if(missingOrderIds.size()>0) orderMap = AmazonService.getMissingOrders(orderMap, setting, missingOrderIds);
                    
                    System.debug('orderMap='+orderMap);
                   
                    for(AmazonResponseTypes.FbaShipment fs : fbaShipments) {
                        
                        ECS__eCommSource_Order__c o ;
                        if(!fs.amazonorderid.StartsWith('S01')) {
                            o = orderMap.get(fs.amazonorderid);
                            if(o==null) o = orderMap2.get(fs.amazonorderid);
                        } else if(fs.amazonorderid.StartsWith('S01')) {
                            o = orderMap.get(fs.merchantorderid); 
                            if(o==null) o = orderMap2.get(fs.merchantorderid); 
                        }
                        
                        if(o!=null) {
                            ECS__Shipping_Detail__c sd;
                            if(o.ECS__Shipping_Details__r!=null && o.ECS__Shipping_Details__r.size()==1) {
                                sd = o.ECS__Shipping_Details__r[0];
                            } else {
                                sd = new ECS__Shipping_Detail__c();
                                sd.Name = sd.ECS__Shipping_Detail_External_Id__c = fs.amazonorderid;
                                sd.ECS__Order__c = o.Id;
                                sd.ECS__Customer__c = o.ECS__Customer__c;
                            }
                            sd.ECS__Status_of_Shipment__c = 'Shipped';
                            sd.ECS__Shipping_Carrier__c = fs.carrier;
                            sd.ECS__Tracking_Number__c = fs.trackingnumber;
                            sd.ECS__Shipped_Time__c = fs.shipmentdate;
                            if(fs.estimatedarrivaldate != null) sd.ECS__Estimated_Delivery__c = date.newInstance(fs.estimatedarrivaldate.year(), fs.estimatedarrivaldate.month(), fs.estimatedarrivaldate.day()); 
                            sdMap.put(fs.amazonorderid, sd);
                            
                        } else {
                            System.debug('Order '+fs.amazonorderid+' for FbaShipment '+fs+' not found!');
                        }
                    }
                    if(sdMap.size()>0) {
                        ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(sdMap.values(), ECS__Shipping_Detail__c.ECS__Shipping_Detail_External_Id__c, false));
                        System.debug('upsert feedback result='+r);
                    }   
                }
                
               if(missingOrderIds.Size()>0){
                 ECS__Log__c logRecord = New ECS__Log__c(); 
                 logRecord.ECS__Log_Name__c='_GET_AMAZON_FULFILLED_SHIPMENTS_DATA_'+reportdetail.eCommazon__Report_Id__c;
                 logRecord.ECS__Log_Detail__c='Orders Below Have Not Been Found on Salesforce:\n'+missingOrderIds;
                 logRecord.eCommazon__Amazon_Report__c=reportdetail.Id;
                 
                  Insert logRecord;
                 System.Debug('***logRecord***'+logRecord);  
              }
                
             
               Return sdMap.values().Size();
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'FBA Shipments Report',reportdetail.id);
                
                Return 0;
            }
       
                
    }
    
    public class SellerFeedbackResponse {
        
        public String response {get; set;}
        public List<AmazonResponseTypes.SellerFeedback> feedbackList {get; set;}
        public Set<String> missingOrderIds {get; set;}
        public Amazon_Setting__c setting {get; set;}
        
        public SellerFeedbackResponse(Amazon_Setting__c s, String r) {
            response = r;
            setting = s;
            processReponse();
        }
        
        public void processReponse() {
            try {
                feedbackList = new List<AmazonResponseTypes.SellerFeedback>();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && !line.startsWith('Date')) {
                        AmazonResponseTypes.SellerFeedback f = new AmazonResponseTypes.SellerFeedback();
                        Integer i=0;
                        for(String s : line.split('\t')) {
                            //Date\tRating\tComments\tYour Response\tArrived on Time\tItem as Described\tCustomer Service\tOrder ID\tRater Email\tRater Role';
                            if(i==0) f.feedbackDate = AmazonUtils.getAmazonDate(s);
                            if(i==1) f.Rating = Integer.valueOf(s);
                            if(i==2) f.Comments = s;
                            if(i==3) f.YourResponse = s;
                            if(i==4) f.arrivedOnTime = s;
                            if(i==5) f.itemAsDescribed = s;
                            if(i==6) f.CustomerService = s;
                            if(i==7) f.OrderID = s;
                            if(i==8) f.RaterEmail = s;
                            if(i==9) f.RaterRole = s;
                            i++;
                        }
                        feedbackList.add(f);
                    }
                }
                
                if(feedbackList.size()>0) {
                    
                    missingOrderIds = new Set<String>();
                    
                    Set<String> orderIds = new Set<String>();
                    for(AmazonResponseTypes.SellerFeedback f : feedbackList) {
                        orderIds.add(f.OrderId);
                    }
                    
                    Map<String, ECS__eCommSource_Order__c> orderMap = new Map<String, ECS__eCommSource_Order__c>();
                    Map<String, ECS__eCommSource_Order__c> orderMap2 = new Map<String, ECS__eCommSource_Order__c>();
                    for(ECS__eCommSource_Order__c o : [Select Id, Name, ECS__External_Order_Id__c, ECS__Account__c, ECS__Customer__c, 
                                                           (Select Id, ECS__Product__c, ECS__Product__r.ECS__External_Product_Id__c From ECS__Order_Lines__r) 
                                                       From ECS__eCommSource_Order__c
                                                       Where Name IN :orderIds OR ECS__External_Order_Id__c IN :orderIds]) {
                        orderMap.put(o.Name, o);
                        orderMap2.put(o.ECS__External_Order_Id__c, o);
                    }
                    
                    for(AmazonResponseTypes.SellerFeedback f : feedbackList) {
                        ECS__eCommSource_Order__c o = orderMap.get(f.OrderId);
                        if(o==null) o = orderMap2.get(f.OrderId);
                        if(o==null) {
                            missingOrderIds.add(f.orderId);
                        }
                    }
                    
                    // Get Missing Orders!
                    //if(missingOrderIds.size()>0) orderMap = AmazonService.getMissingOrders(orderMap, setting, missingOrderIds);
                        
                    List<CloudConversion__Feedback__c> feedbackToUpsert = new List<CloudConversion__Feedback__c>();
                    for(AmazonResponseTypes.SellerFeedback f : feedbackList) {
                        ECS__eCommSource_Order__c o = orderMap.get(f.OrderId);
                        if(o==null) o = orderMap2.get(f.OrderId);
                        if(o!=null) {
                            CloudConversion__Feedback__c fb = new CloudConversion__Feedback__c(Name=f.OrderId);
                            fb.CloudConversion__Customer__c = o.ECS__Customer__c;
                            fb.CloudConversion__Order__c = o.Id;
                            fb.CloudConversion__Rating__c = f.Rating+'';
                            fb.CloudConversion__Comment_Body__c = f.Comments;
                            
                            if('Yes'.equals(f.arrivedOnTime)) fb.CloudConversion__Arrived_on_Time__c = true;
                            if('Yes'.equals(f.itemAsDescribed)) fb.CloudConversion__Item_as_Described__c = true;
                            if('Yes'.equals(f.CustomerService)) fb.CloudConversion__Customer_Service__c = true; 
                            
                            fb.CloudConversion__External_Feedback_Id__c = f.OrderID;
                            fb.CloudConversion__Comment_Time__c = datetime.newInstance(f.feedbackDate.year(), f.feedbackDate.month(), f.feedbackDate.day());
                            fb.CloudConversion__Follow_up__c = f.YourResponse;
                            fb.CloudConversion__Origin__c = 'Amazon';
                            if(o.ECS__Order_Lines__r!=null && o.ECS__Order_Lines__r.size()==1) {
                                for(ECS__eCommSource_Order_Line__c ol : o.ECS__Order_Lines__r) {
                                    fb.CloudConversion__Order_Line__c = ol.Id;
                                    fb.CloudConversion__Product__c = ol.ECS__Product__c;
                                }
                            }
                            
                            feedbackToUpsert.add(fb);
                            
                        } else {
                            System.debug('Order '+f.orderId+' for Feedback '+f+' not found!');
                        }
                    }
                    
                    if(feedbackToUpsert.size()>0) {
                        ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(feedbackToUpsert, CloudConversion__Feedback__c.CloudConversion__External_Feedback_Id__c, false));
                        System.debug('upsert feedback result='+r);
                    } 
                }
                
                
            } catch(Exception e) {
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                Util.logException(e, 'Feedback Report');
            }
        }
    }

    /*public class PaymentSettlementResponse {
        
        public String response {get; set;}
        public List<AmazonResponseTypes.PaymentSettlement> paymentSettlementList {get; set;}
        public Amazon_Setting__c setting {get; set;}
        
        public PaymentSettlementResponse(Amazon_Setting__c s, String r) {
            response = r;
            setting = s;
            processReponse();
        }
        
        public void processReponse() {
            try {
                paymentSettlementList = new List<AmazonResponseTypes.PaymentSettlement>();
                Utility_RowIterator ri = new Utility_RowIterator(response);
                while(ri.hasNext()) {
                    String line = ri.next();
                    if(line!=null && !line.startsWith('settlement-id')) {
                        AmazonResponseTypes.PaymentSettlement p = new AmazonResponseTypes.PaymentSettlement();
                        Integer i=0;
                        for(String s : line.split('\t')) {
                            if(i==0) p.settlementid = s;
                            if(i==1 && s!=null && s!='') p.settlementstartdate = AmazonUtils.getDate(s);
                            if(i==2 && s!=null && s!='') p.settlementenddate = AmazonUtils.getDate(s);
                            if(i==3 && s!=null && s!='') p.depositdate = AmazonUtils.getDate(s);
                            if(i==4 && s!=null && s!='') p.totalamount = Double.valueOf(s);
                            if(i==5) p.currencyStr = s;
                            if(i==6) p.transactiontype = s;
                            if(i==7) p.orderid = s;
                            if(i==8) p.merchantorderid = s;
                            if(i==9) p.adjustmentid = s;
                            if(i==10) p.shipmentid = s;
                            if(i==11) p.marketplacename = s;
                            if(i==12) p.shipmentfeetype = s;
                            if(i==13 && s!=null && s!='') p.shipmentfeeamount = Double.valueOf(s);
                            if(i==14) p.orderfeetype = s;
                            if(i==15 && s!=null && s!='') p.orderfeeamount = Double.valueOf(s);
                            if(i==16) p.fulfillmentid = s;
                            if(i==17) p.posteddate = AmazonUtils.getDate(s);
                            if(i==18) p.orderitemcode = s;
                            if(i==19) p.merchantorderitemid = s;
                            if(i==20) p.merchantadjustmentitemid = s;
                            if(i==21) p.sku = s;
                            if(i==22) p.quantitypurchased = s;
                            if(i==23) p.pricetype = s;
                            if(i==24 && s!=null && s!='') p.priceamount = Double.valueOf(s);
                            if(i==25) p.itemrelatedfeetype = s;
                            if(i==26 && s!=null && s!='') p.itemrelatedfeeamount = Double.valueOf(s);
                            if(i==27 && s!=null && s!='') p.miscfeeamount = Double.valueOf(s);
                            if(i==28 && s!=null && s!='') p.otherfeeamount = Double.valueOf(s);
                            if(i==29) p.otherfeereasondescription = s;
                            if(i==30) p.promotionid = s;
                            if(i==31) p.promotiontype = s;
                            if(i==32 && s!=null && s!='') p.promotionamount = Double.valueOf(s);
                            if(i==33) p.directpaymenttype = s;
                            if(i==34 && s!=null && s!='') p.directpaymentamount = Double.valueOf(s);
                            if(i==35 && s!=null && s!='') p.otheramount = Double.valueOf(s);
                            i++;
                        }
                        paymentSettlementList.add(p);
                    }
                }
                
                processSettlementData(setting, paymentSettlementList);
                
            } catch(Exception e) {
                Util.logException(e, 'Payment Settlement Report');
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
            }
        }
    }*/

    public class PaymentSettlementV2Response {
        
        public String response {get; set;}

        public Amazon_Setting__c setting {get; set;}
        public Amazon_Report__c report {get; set;}
              
        public Amazon_Settlement_Report__c settlement {get; set;}
        public Map<String, List<AmazonResponseTypes.PaymentSettlementLine>> paymentSettlements {get; set;}
        
        public List<AmazonResponseTypes.PaymentSettlementLine> paymentSettlementLines {get; set;}
          
        public PaymentSettlementV2Response(Amazon_Setting__c s, Amazon_Report__c ar, String r) {
            response = r;
            setting = s;
            report = ar;
            processReponse();
        }
        
        public void processReponse() {
            try {
                //settlement = new AmazonResponseTypes.PaymentSettlement();
                settlement = new Amazon_Settlement_Report__c();
                settlement.eCommazon__Amazon_Setting__c = setting.Id;
                settlement.eCommazon__Amazon_Report__c = report.Id;
                string currencyType;
                paymentSettlements = new Map<String,List<AmazonResponseTypes.PaymentSettlementLine>>();
                
                paymentSettlementLines = new List<AmazonResponseTypes.PaymentSettlementLine>();
                if(!response.Contains('<ErrorResponse') && !response.Contains('RequestThrottled')) {
                        Utility_RowIterator ri = new Utility_RowIterator(response);
                        Integer total = 0;
                        
                        while(ri.hasNext()) {
                            String line = ri.next();
                            if(line!=null) {
                               if(total==0) { 
                                  total++;
                               } else if(total==1) { 
                                 Integer i=0;
                                 for(String s : line.split('\t')) {
                                     if(i==0) settlement.Name = settlement.eCommazon__External_Id__c = s;  // settlement-id
                                     else if(i==1 && s!=null && s!='') {
                                        if(s.contains('.')){
                                            settlement.eCommazon__Start_Date__c = AmazonUtils.getUsDate(s);
                                        }else{
                                            String[] temp = s.split('\\+');
                                            settlement.eCommazon__Start_Date__c = DateTime.valueOf(temp[0].replace('T',' ')); //AmazonUtils.getDate(s); // settlement-start-date
                                        }
                                     } else if(i==2 && s!=null && s!='') {
                                        if(s.contains('.')){
                                            settlement.eCommazon__End_Date__c = AmazonUtils.getUsDate(s);
                                        }else{
                                            String[] temp = s.split('\\+');
                                            settlement.eCommazon__End_Date__c = DateTime.valueOf(temp[0].replace('T',' ')); //AmazonUtils.getDate(s); // settlement-end-date
                                        }
                                     } else if(i==3 && s!=null && s!='') {
                                        if(s.contains('.')){
                                            settlement.eCommazon__Deposit_Date__c = AmazonUtils.getUsDate(s); 
                                        }else{
                                            String[] temp = s.split('\\+');
                                            settlement.eCommazon__Deposit_Date__c = DateTime.valueOf(temp[0].replace('T',' ')); //AmazonUtils.getDate(s); // deposit-date
                                        }
                                     }
                                     else if(i==4 && s!=null && s!='') settlement.eCommazon__Total_Amount__c = Double.valueOf(s); // total-amount
                                     else if(i==5) {
                                        /*if(s == 'CAD' || s.contains('CAD')){
                                            if(settlement.eCommazon__Total_Amount__c != null) settlement.eCommazon__Total_Amount__c *= AmazonUtils.getUsdToCad();
                                            settlement.eCommazon__Currency__c = 'USD';
                                            currencyType = 'CAD';
                                        }else{*/
                                            settlement.eCommazon__Currency__c = s; // currency  
                                        //}
                                     }
                                     //else break;
                                     i++;
                                 }
                                 total++;
                              } else {
                                AmazonResponseTypes.PaymentSettlementLine p = new AmazonResponseTypes.PaymentSettlementLine();
                                
                                Integer i=0;
                                String[] cols = line.split('\t');
                                System.debug('cols.size()='+cols.size());
                                for(String s : cols) {
                                    //System.debug('s='+s+' i='+i);
                                    //if(i==0) p.settlementid = s;  // settlement-id
                                    //else if(i==1 && s!=null && s!='') p.settlementstartdate = AmazonUtils.getDate(s); // settlement-start-date
                                    //else if(i==2 && s!=null && s!='') p.settlementenddate = AmazonUtils.getDate(s); // settlement-end-date
                                    //else if(i==3 && s!=null && s!='') p.depositdate = AmazonUtils.getDate(s); // deposit-date
                                    if(i==6) p.transactiontype = s; // transaction-type
                                    else if(i==7) p.orderid = s; // order-id
                                    else if(i==8) p.merchantorderid = s; // merchant-order-id
                                    else if(i==9) p.adjustmentid = s; // adjustment-id
                                    else if(i==10) p.shipmentid = s; // shipment-id
                                    else if(i==11) p.marketplacename = s; // marketplace-name
                                    else if(i==12) p.amountType = s; // amount-type -- shipment-fee-type
                                    else if(i==13) p.priceType = s; // amount-description -- shipment-fee-amount
                                    else if(i==14 && s!=null && s!=''){
                                         p.priceAmount = Double.valueOf(s); // amount
                                         if(currencyType == 'CAD') p.priceAmount *= AmazonUtils.getUsdToCad();
                                    }
                                    else if(i==15) p.fulfillmentid = s;// fulfillment-id
                                    //else if(i==16) p.posteddate = AmazonUtils.getDate(s); // posted-date     2014-04-03
                                    else if(i==17){
                                        if(s.contains('.')){
                                            p.posteddate = String.Valueof(AmazonUtils.getUsDate(s));
                                        }else{
                                            p.posteddate = s; //AmazonUtils.getDate(s);  // posted-date-time  2014-04-03 03:55:12 PST 
                                        }
                                    }   
                                    else if(i==18) p.orderitemcode = s; // order-item-code
                                    //else if(i==19) p.merchantorderitemid = s; // merchant-order-item-id
                                    //else if(i==20) p.merchantadjustmentitemid = s; // merchant-adjustment-item-id
                                    else if(i==21) p.sku = s; // sku
                                    else if(i==22) p.quantitypurchased = s; // quantity-purchased
                                    else if(i==23) p.promotionid = s; // promotion-id
                                        
                                  //  else if(i==23 && s!=null && s!='') p.priceType = s; // price-amount
                                   /* else if(i==24 && s!=null && s!='') p.priceAmount = Double.valueOf(s); // quantity-purchased
                                    else if(i==25 && s!=null && s!='') p.priceType = s; // item-related-fee-amount
                                    else if(i==26 && s!=null && s!='') p.priceAmount = Double.valueOf(s); // misc-fee-amount
                                    else if(i==30 && s!=null && s!='') {
                                        p.promotionid = s; // promotion-id
                                        p.priceType = 'Promotion';
                                    } else if(i==31) p.promotionType = s; // promotion-type
                                    else if(i==32 && s!=null && s!='') p.promotionAmount = Double.valueOf(s); // promotion-amount*/
                                    i++;
                               }
                                
                                System.debug('p['+i+']='+p);
        
                                String uniqueId = p.shipmentid+'-'+p.orderitemcode;
                                if('A-to-z Guarantee Refund'.equals(p.transactionType) || 'Chargeback Refund'.equals(p.transactionType) || 'Refund'.equals(p.transactionType)) uniqueId = p.adjustmentid;
                                    
                                paymentSettlementLines.add(p);
                                    
                                //if(p.orderitemcode!=null && p.orderitemcode!='') {
                                    if(paymentSettlements.containsKey(uniqueId)) {
                                        List<AmazonResponseTypes.PaymentSettlementLine> paymentSettlementList = paymentSettlements.get(uniqueId);
                                        paymentSettlementList.add(p);
                                        paymentSettlements.put(uniqueId, paymentSettlementList);
                                    } else {
                                        List<AmazonResponseTypes.PaymentSettlementLine> paymentSettlementList = new List<AmazonResponseTypes.PaymentSettlementLine>{p};
                                        paymentSettlements.put(uniqueId, paymentSettlementList);
                                    }
                                    
                                //}
                              }
                           }
                        }
                    }
                } catch(Exception e) {
                    Util.logException(e, 'Payment Settlement V2 Report');
                    System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
                }
        }
    }
    
    public static Integer processSettlementData(Amazon_Setting__c setting, Amazon_Settlement_Report__c settlement, List<AmazonResponseTypes.PaymentSettlementLine> paymentSettlementList) {
        
        Integer numProcessed = 0;
        
        System.debug('paymentSettlementList='+paymentSettlementList);
        
        try {
                ECS.Util.Result r = ECS.Util.handleUpsertResult(Database.upsert(settlement, Amazon_Settlement_Report__c.External_Id__c));
                System.debug('settlementResult='+r);

                Set<String> orderIds = new Set<String>();
                Set<String> orderLineIds = new Set<String>();
                Set<String> settlementUniqueIds = new Set<String>();
                
                //Map<String, ECS__Product__c> prodsToUpsert = new Map<String, ECS__Product__c>();
                Set<String> reportNotCreated = New Set<String>();
                Set<String> reportNotbcaz = New Set<String>();
                Set<String> orderNmbrAmazonque = New Set<String>();
        
                for(AmazonResponseTypes.PaymentSettlementLine ps : paymentSettlementList) {
                    System.debug('ps='+ps);
                  // if(ps.orderid!=null && ps.orderid.startsWith('S01') && ps.merchantorderid == Null)
                   //  reportNotCreated.add(ps.orderid);
                   if(ps.orderid!=null && ps.orderid.startsWith('S01') && ps.merchantorderid != Null && !ps.merchantorderid.contains('-') && ps.merchantorderid.startsWith('REM'))
                      reportNotbcaz.add(ps.merchantorderid.Trim());
                   if(ps.orderid!=null && ps.orderid.startsWith('S01') && !ps.merchantorderid.startsWith('REM'))
                     orderIds.add(ps.merchantorderid);
                   else if(ps.orderid!=null) orderIds.add(ps.orderid); 
                   if(ps.orderitemcode!=null) {
                     orderLineIds.add(ps.orderitemcode);
                     settlementUniqueIds.add(ps.shipmentid+'-'+ps.orderitemcode);
                   }
                   
                    /*if(ps.sku!=null && !prodsToUpsert.containsKey(ps.sku)) {
                        ECS__Product__c p = new ECS__Product__c();
                        p.Name = p.ECS__External_Product_Id__c = ps.sku;
                        prodsToUpsert.put(ps.sku, p);
                    }*/
                }
                System.debug('**orderIds**'+orderIds);
                System.debug('**orderLineIds**'+orderLineIds);
                
                Map<String,ECS__eCommSource_Order__c> orderMap = new Map<String,ECS__eCommSource_Order__c>();
                
                for(ECS__eCommSource_Order__c o : [Select Id,Name, ECS__Customer__c, ECS__Client_Order_Identifier__c, ECS__External_Order_Id__c
                                                   From ECS__eCommSource_Order__c
                                                   Where Name IN:orderIds]) {
                    orderMap.put(o.Name, o);
                }
                
                Map<String,ECS__eCommSource_Order__c> orderMap2 = new Map<String,ECS__eCommSource_Order__c>();
                if(orderMap.size()==0) { // didn't find any orders
                    for(ECS__eCommSource_Order__c o : [Select Id,Name, ECS__Customer__c, ECS__Client_Order_Identifier__c, ECS__External_Order_Id__c
                                                       From ECS__eCommSource_Order__c
                                                       Where ECS__External_Order_Id__c!=null AND ECS__External_Order_Id__c IN:orderIds]) {                                                   
                        orderMap2.put(o.ECS__External_Order_Id__c, o);
                    }
                }
                                
                Set<String> missingOrderIds = new Set<String>();                
                for(AmazonResponseTypes.PaymentSettlementLine ps : paymentSettlementList) {
                    if(ps.orderid!=null && ps.orderid!=''  && (!ps.orderid.startsWith('S01') && !ps.orderid.startsWith('REM')) && 
                       !orderMap.containsKey(ps.orderid) && !orderMap2.containsKey(ps.orderid)) {
                        missingOrderIds.add(ps.orderId);
                    }
                }
                
                // Put Missing Orders on the Queue!
                System.debug('missingOrderIds='+missingOrderIds);
                if(missingOrderIds.size()>0) {
                    List<Amazon_Queue__c> queueList = new List<Amazon_Queue__c>();
                    for(String orderId : missingOrderIds) {
                        if(!orderId.Contains('Error') && !orderId.Contains('ErrorResponse') && !orderId.Contains('<') && !orderId.Contains('>')){
                            Amazon_Queue__c q = new Amazon_Queue__c();
                            q.Amazon_Setting__c = setting.Id;
                            q.Status__c = 'Pending';
                            q.Identifier__c = orderId;
                            q.Type__c = 'Order';
                            queueList.add(q);
                        }
                    }
                    System.debug('queueList='+queueList);
                    //insert queueList;
                     Database.upsert(queueList, Amazon_Queue__c.eCommazon__Identifier__c, false);
                     if(queueList.size()>0){
                       For(Amazon_Queue__c AmazQue : queueList){
                         orderNmbrAmazonque.Add(AmazQue.eCommazon__Identifier__c);
                     }
                   }
                   // orderMap = AmazonService.getMissingOrders(orderMap, setting, missingOrderIds);
                }
                
                System.debug('orderMap='+orderMap);
                System.debug('orderMap2='+orderMap2);
                
                Map<id,id> orderLineIdAndB2C = New Map<id,id>();
                Map<id,Integer> B2CIdAndQtyToBuild = New Map<id,Integer>();  
                Map<String,ECS__eCommSource_Order_Line__c> orderLineMap = new Map<String,ECS__eCommSource_Order_Line__c>();
                for(ECS__eCommSource_Order_Line__c ol : [Select Id, ECS__External_Order_Line_ID__c,ECS__Grouped_Product__c,eCommazon__Order_Line_Id__c, ECS__Product__c,ECS__Quantity__c
                                                         From ECS__eCommSource_Order_Line__c
                                                         Where eCommazon__Order_Line_Id__c !=null AND eCommazon__Order_Line_Id__c IN :orderLineIds]) {
                    orderLineMap.put(ol.eCommazon__Order_Line_Id__c, ol);
                    
                    if(ol.ECS__Grouped_Product__c != null)
                        orderLineIdAndB2C.put(ol.id,ol.ECS__Grouped_Product__c);
                }
                System.Debug('orderLineMap : '+orderLineMap);
                
                Map<String,ECS__eCommSource_Order_Line__c> orderLineMap2 = new Map<String,ECS__eCommSource_Order_Line__c>();
                if(orderLineMap.size()==0) { // didn't find any order lines
                    for(ECS__eCommSource_Order_Line__c ol : [Select Id, ECS__Sale_Source_ID__c, ECS__Product__c,ECS__Quantity__c,ECS__Grouped_Product__c
                                                             From ECS__eCommSource_Order_Line__c
                                                             Where ECS__Sale_Source_ID__c!=null AND ECS__Sale_Source_ID__c IN :orderLineIds]) {
                        orderLineMap2.put(ol.ECS__Sale_Source_ID__c, ol);
                        
                        if(ol.ECS__Grouped_Product__c != null)
                            orderLineidAndB2C.put(ol.id,ol.ECS__Grouped_Product__c);
                    }
                }
              
                
                /*r = ECS.Util.handleUpsertResult(Database.upsert(prodsToUpsert.values(), ECS__Product__c.ECS__External_Product_Id__c, false));
                System.debug('prodsResult='+r);
                
                Map<String,ECS__Product__c> prodMap = new Map<String,ECS__Product__c>();
                for(ECS__Product__c p : [Select Id, ECS__External_Product_Id__c 
                                         From ECS__Product__c
                                         Where ECS__External_Product_Id__c!=null AND ECS__External_Product_Id__c IN:prodsToUpsert.keySet()]) {
                    prodMap.put(p.ECS__External_Product_Id__c, p);
                }*/

                //Set<String> missingOrderIds = new Set<String>();
                List<ECS__eCommSource_Order_Line__c> missingOrderLines = new List<ECS__eCommSource_Order_Line__c>();
                /*for(AmazonResponseTypes.PaymentSettlementLine ps : paymentSettlementList) {
                    if(ps.orderitemcode!=null && !orderLineMap.containsKey(ps.orderitemcode) && !orderLineMap2.containsKey(ps.orderitemcode) && ps.orderid!=null && ps.sku!=null && prodMap.containsKey(ps.sku)) {
                        ECS__eCommSource_Order__c order = orderMap.get(ps.orderid);
                        if(order==null) order = orderMap2.get(ps.orderid);
                        
                        if(order!=null) {
                            ECS__eCommSource_Order_Line__c ol = new ECS__eCommSource_Order_Line__c();
                            ol.Name = ps.orderid;
                            ol.ECS__Order__c = order.Id;
                            ol.ECS__External_Order_Line_Id__c = ps.orderitemcode;
                            //ol.ECS__Quantity__c = ps.quantitypurchased;
                            ol.ECS__Customer__c = order.ECS__Customer__c;
                            ///ol.ECS__Product__c = prodMap.get(ps.sku).Id;
                            //missingOrderLines.add(ol);
                            //orderLineMap.put(ps.orderitemcode, ol);
                        }
                    }
                }*/
                
                if(missingOrderLines.size()>0) {
                    System.debug('missingOrderLines='+missingOrderLines);
                    Database.upsert(missingOrderLines, ECS__eCommSource_Order_Line__c.ECS__External_Order_Line_Id__c, false);
                    orderLineMap = new Map<String,ECS__eCommSource_Order_Line__c>();
                    for(ECS__eCommSource_Order_Line__c ol : [Select Id, ECS__External_Order_Line_ID__c, ECS__Product__c,eCommazon__Order_Line_Id__c,ECS__Quantity__c,ECS__Grouped_Product__c
                                                             From ECS__eCommSource_Order_Line__c
                                                             Where eCommazon__Order_Line_Id__c !=null AND eCommazon__Order_Line_Id__c IN :orderLineIds]) {
                        orderLineMap.put(ol.eCommazon__Order_Line_Id__c, ol);
                        
                        if(ol.ECS__Grouped_Product__c != null)
                            orderLineIdAndB2C.put(ol.id,ol.ECS__Grouped_Product__c);
                    }
                }
                System.debug('orderLineMap='+orderLineMap);
                
                if(orderLineidAndB2C.Values().Size()>0){
                    for(ECS__Associated_Product__c asp : [Select id,ECS__Quantity_to_Build__c,ECS__Master_SKU__c 
                                                          from ECS__Associated_Product__c where ECS__Master_SKU__c IN:orderLineidAndB2C.Values()]){
                        B2CIdAndQtyToBuild.put(asp.ECS__Master_SKU__c,Integer.ValueOf(asp.ECS__Quantity_to_Build__c));                                      
                    }
                }
                
                Map<String, Amazon_Settlement_Report_Line__c> settlementLineMap = new Map<String, Amazon_Settlement_Report_Line__c>();                
                /*for(Amazon_Settlement_Report_Line__c srl : [Select Id, External_Id__c, eCommazon__FBA_Weight_Based_Fee__c, eCommazon__FBA_per_Unit_Fulfillment_Fee__c, eCommazon__FBA_Per_Order_Fulfillment_Fee__c, 
                                                                   eCommazon__Shipping_Chargeback__c, Commission__c, eCommazon__Variable_Closing_Fee__c, eCommazon__Giftwrap_Chargeback__c, 
                                                                   eCommazon__Refund_Commission__c, eCommazon__Quantity__c, eCommazon__Item_Price__c, Tax__c 
                                                            From Amazon_Settlement_Report_Line__c Where External_Id__c IN:settlementUniqueIds]) {
                    settlementLineMap.put(srl.External_Id__c, srl);
                }*/

                Map<String,Amazon_Queue__c> queueList = new Map<String,Amazon_Queue__c>();
                 
                //Map<String,ECS__Payment_Detail__c> pdList = new Map<String,ECS__Payment_Detail__c>();              
                //Map<String,ECS__Credit_Memo__c> cmMap = new Map<String,ECS__Credit_Memo__c>();
                
                Map<String,String> orderLineUniqueIdMap = new Map<String,String>();
                Map<String,ECS__eCommSource_Order_Line__c> orderLines = new Map<String,ECS__eCommSource_Order_Line__c>();
                List<AmazonResponseTypes.PaymentSettlementLine> adjustments = new List<AmazonResponseTypes.PaymentSettlementLine>();
                Map<String, eCommazon__Amazon_Settlement_Report_Transaction__c> txnMap = new Map<String, eCommazon__Amazon_Settlement_Report_Transaction__c>();
                Map<String,Decimal> MaptoAddAmount=New Map<String,Decimal>();
                Map<String,Decimal> MaptoAddPriceAmount=New Map<String,Decimal>();
                Map<String,String> settlerecordnotCreated= New Map<String,String>();
                List<ECS__Log__c> logListForSettlement = New List<ECS__Log__c>();
                Map<String,Integer> MaptoAddQuantity=New Map<String,Integer>();
                
               for(AmazonResponseTypes.PaymentSettlementLine ps : paymentSettlementList) {
                    try{
                        ECS__eCommSource_Order__c o;
                       
                        System.Debug('***ps***'+ps);
                        if(ps.orderid != null && ps.orderid.startsWith('S01') && ps.merchantorderid != null && !ps.merchantorderid.startsWith('REM')) {
                              o = orderMap.get(ps.merchantorderid);
                              if(o==null) o = orderMap2.get(ps.merchantorderid);
                        } else {
                             o = orderMap.get(ps.orderid);
                             if(o==null) o = orderMap2.get(ps.orderid);
                        }
                                Amazon_Settlement_Report_Line__c asrl;
                                String uniqueId;
                                if('Order'.equals(ps.transactionType) || 'A-to-z Guarantee Refund'.equals(ps.transactionType) || 'Chargeback Refund'.equals(ps.transactionType) || 'Refund'.equals(ps.transactionType) || 'other-transaction'.equals(ps.transactionType) || 'ServiceFee'.equals(ps.transactionType)) {
                                     uniqueId = ps.shipmentid+'-'+ps.orderitemcode;
                                     System.Debug('uniqueId 1 : '+uniqueId);
                                } 
                                else if('Order_Retrocharge'.equals(ps.transactionType) || 'Refund_Retrocharge'.equals(ps.transactionType)){
                                    uniqueId = ps.transactionType+'-'+ps.orderid;
                                    System.Debug('uniqueId 1 : '+uniqueId);
                                }
                                    if('A-to-z Guarantee Refund'.equals(ps.transactionType) || 'Chargeback Refund'.equals(ps.transactionType) || 'Refund'.equals(ps.transactionType)) uniqueId = ps.adjustmentId;
                                    else if('other-transaction'.equals(ps.transactionType)) uniqueId = settlement.Name+'-'+ps.priceType+'-'+ps.priceAmount;
                                    System.Debug('uniqueId 2 : '+uniqueId);
                                    System.Debug('ps.priceType : '+ps.priceType);
        
                                    //Boolean isRemoval = false;
                                    //if(o.ECS__Client_Order_Identifier__c!=null && o.ECS__Client_Order_Identifier__c.startsWith('REM')) isRemoval = true;
                                    
                                    // Store Fee, RemovalComplete, Subscription Fee, DisposalFee, Previous Reserve Amount Balance, WAREHOUSE_LOST, BalanceAdjustment, ServiceFee
                                    // NonSubscriptionFeeAdj, Current Reserve Amount, StorageRenewalBilling, 
                                    
                                    // WAREHOUSE_DAMAGE
                                    // ServiceFee
                                    // FBAInboundTransportationFee
                                    
                                    
                                    if(('other-transaction'.equals(ps.transactionType) || 'Lightning Deal Fee'.equals(ps.transactionType) || 'SellerReviewEnrollmentPayment'.equals(ps.transactionType) || 'CouponRedemptionFee'.equals(ps.transactionType)) && (o==null || ps.orderid==null || ps.orderid==''  || ps.orderid.startsWith('REM'))) {
                                        Integer i = 1;
                                        String uniqueIdStr;
                                        
                                        String OrderId = '0';
                                        if(ps.orderid != '' &&  ps.orderid != Null){
                                            OrderId = ps.orderid; 
                                        }
                                        uniqueIdStr = settlement.Name+'-'+ps.priceType+'-'+OrderId+'-'+ps.priceAmount+'-'+ps.postedDate;
                                       
                                        while(txnMap.containsKey(uniqueIdStr)) uniqueIdStr = uniqueIdStr+'-'+i++;
                                        
                                        eCommazon__Amazon_Settlement_Report_Transaction__c txn = new eCommazon__Amazon_Settlement_Report_Transaction__c();
                                        txn.Name = ps.priceType;
                                        txn.eCommazon__Amazon_Settlement_Report__c = settlement.Id;
                                        txn.eCommazon__External_Id__c = uniqueIdStr;
                                        System.Debug('eCommazon__External_Id__c 2 : '+uniqueIdStr);
                                        //txn.eCommazon__Description__c = ps.priceType;
                                        
                                        String[] temp = ps.postedDate.split(' ');
                                        txn.eCommazon__Posted_Date__c = DateTime.valueOf(temp[0]+' '+temp[1]);
                                        
                                        txn.eCommazon__Amount__c = ps.priceAmount;
                                        
                                        txn.eCommazon__Order_Number__c = ps.orderid;
                                        
                                        txnMap.put(uniqueIdStr, txn);
        
                                    }else if((!'other-transaction'.equals(ps.transactionType) && !'Refund'.equals(ps.transactionType) && !'Order'.equals(ps.transactionType)) && (ps.orderid==null || ps.orderid=='' )) {
                                        Integer i = 1;
                                        String uniqueIdStr;
                                        
                                        uniqueIdStr = settlement.Name+'-'+ps.amountType+'-'+ps.priceAmount+'-'+ps.postedDate;
                                       
                                        while(txnMap.containsKey(uniqueIdStr)) uniqueIdStr = uniqueIdStr+'-'+i++;
                                        
                                        eCommazon__Amazon_Settlement_Report_Transaction__c txn = new eCommazon__Amazon_Settlement_Report_Transaction__c();
                                        txn.Name = ps.amountType;
                                        txn.eCommazon__Amazon_Settlement_Report__c = settlement.Id;
                                        txn.eCommazon__External_Id__c = uniqueIdStr;
                                        System.Debug('eCommazon__External_Id__c 2 : '+uniqueIdStr);
                                        
                                        String[] temp = ps.postedDate.split(' ');
                                        txn.eCommazon__Posted_Date__c = DateTime.valueOf(temp[0]+' '+temp[1]);
                                        
                                        txn.eCommazon__Amount__c = ps.priceAmount;
                                        
                                        
                                        txnMap.put(uniqueIdStr, txn);
                                        
                                    }else if(o!=null) {       
                                        if(settlementLineMap.containsKey(uniqueId)) {
                                           asrl = settlementLineMap.get(uniqueId);
                                        } else {
                                            asrl = new Amazon_Settlement_Report_Line__c();
                                            asrl.eCommazon__Other_Amount__c = 0;
                                            asrl.eCommazon__Amazon_Settlement_Report__c = settlement.Id;
                                            asrl.Order__c = o.Id;
                                            asrl.External_Id__c = uniqueId;
                                           // if(ps.shipmentid !=null && ps.shipmentid !='' && ps.orderitemcode!=Null && ps.orderitemcode !='')
                                            // settlerecordnotCreated.put(asrl.External_Id__c,String.ValueOf(o.Name));
                                        }
                                    
                                        asrl.Name = ps.orderid;
                                        if(ps.sku!=null && ps.sku!='') {
                                            asrl.Name += '-'+ps.sku;
                                            asrl.SKU__c = ps.sku;
                                        }
                                                                            
                                        asrl.eCommazon__Fulfillment_Channel__c = ps.fulfillmentid;
                                        asrl.eCommazon__Type__c = ps.transactiontype;
                                        if('Refund'.equals(ps.transactionType)) asrl.eCommazon__Type__c = 'Refund';
                                        if('A-to-z Guarantee Refund'.equals(ps.transactionType)) asrl.eCommazon__Type__c = 'A-to-z Guarantee Refund';
                                        if('Chargeback Refund'.equals(ps.transactionType)) asrl.eCommazon__Type__c = 'Chargeback Refund';
                                            
                                        //if(prodMap.containsKey(ps.sku)) asrl.B2C_Product__c = prodMap.get(ps.sku).Id;
                                    
                                        ECS__eCommSource_Order_Line__c ol = orderLineMap.get(ps.orderitemcode);
                                        System.Debug('ol : '+ol);
                                        if(ol==null) ol = orderLineMap2.get(ps.orderitemcode);
                                        if(ol!=null) {
                                            asrl.eCommazon__Order_Line__c = ol.Id;
                                            orderLineUniqueIdMap.put(ol.Id, uniqueId);
                                            asrl.B2C_Product__c = ol.ECS__Product__c;
                                        }
                                        
                                        if('FBAWeightBasedFee'.equals(ps.priceType) || 'FBA transportation fee'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__FBA_Weight_Based_Fee__c==null) asrl.eCommazon__FBA_Weight_Based_Fee__c = 0;
                                            asrl.eCommazon__FBA_Weight_Based_Fee__c += ps.priceAmount;
                                        } else if('FBAPerUnitFulfillmentFee'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__FBA_per_Unit_Fulfillment_Fee__c==null) asrl.eCommazon__FBA_per_Unit_Fulfillment_Fee__c = 0;
                                            asrl.eCommazon__FBA_per_Unit_Fulfillment_Fee__c += ps.priceAmount;
                                        } else if('FBAPerOrderFulfillmentFee'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__FBA_Per_Order_Fulfillment_Fee__c==null) asrl.eCommazon__FBA_Per_Order_Fulfillment_Fee__c = 0;
                                            asrl.eCommazon__FBA_Per_Order_Fulfillment_Fee__c += ps.priceAmount;
                                        } else if('ShippingChargeback'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Shipping_Chargeback__c==null) asrl.eCommazon__Shipping_Chargeback__c = 0;
                                            asrl.eCommazon__Shipping_Chargeback__c += ps.priceAmount; 
                                        } else if('Commission'.equals(ps.priceType)) {
                                            if(asrl.Commission__c==null) asrl.Commission__c = 0;
                                            asrl.Commission__c += ps.priceAmount;
                                        } else if('ShippingHB'.equals(ps.priceType) || 'VariableClosingFee'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Variable_Closing_Fee__c==null) asrl.eCommazon__Variable_Closing_Fee__c = 0;
                                            asrl.eCommazon__Variable_Closing_Fee__c += ps.priceAmount;
                                        } else if('ShippingTax'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Shipping_Tax__c==null) asrl.eCommazon__Shipping_Tax__c = 0;
                                            asrl.eCommazon__Shipping_Tax__c += ps.priceAmount;
                                        } else if('GiftWrap'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Gift_Wrap__c==null) asrl.eCommazon__Gift_Wrap__c = 0;
                                            asrl.eCommazon__Gift_Wrap__c += ps.priceAmount;
                                        } else if('RestockingFee'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Restocking_Fee__c==null) asrl.eCommazon__Restocking_Fee__c = 0;
                                            asrl.eCommazon__Restocking_Fee__c += ps.priceAmount;
                                        } else if('GiftwrapChargeback'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Giftwrap_Chargeback__c==null) asrl.eCommazon__Giftwrap_Chargeback__c = 0;
                                            asrl.eCommazon__Giftwrap_Chargeback__c += ps.priceAmount;
                                        } else if('RefundCommission'.equals(ps.priceType)) {
                                            if(asrl.eCommazon__Refund_Commission__c==null) asrl.eCommazon__Refund_Commission__c = 0;
                                            asrl.eCommazon__Refund_Commission__c += ps.priceAmount;
                                        } else if('Promotion'.equals(ps.priceType)) {
                                            asrl.eCommazon__Promotion__c = ps.promotionid;
                                            if(asrl.eCommazon__PromotionAmount__c==null) asrl.eCommazon__PromotionAmount__c = 0;
                                            asrl.eCommazon__PromotionAmount__c += ps.promotionAmount;
                                        } else if('Principal'.equals(ps.priceType)) {
                                            
                                            String[] temp = ps.posteddate.split('\\+');
                                            asrl.eCommazon__Posted_Date__c = DateTime.valueOf(temp[0].replace('T',' '));
                                             
                                            if(ps.quantitypurchased !=null && ps.quantitypurchased!='') {
                                                if(asrl.eCommazon__Quantity__c==null) asrl.eCommazon__Quantity__c = 0;
                                                System.Debug('ps.promotionid :'+ps.promotionid);
                                                System.Debug('ps.quantitypurchased :'+ps.quantitypurchased); 
                                                if(ps.promotionid == null || ps.promotionid == '' || ps.promotionid == '\r') {
                                                    asrl.eCommazon__Quantity__c += Integer.valueOf(ps.quantitypurchased);
                                                    If(MaptoAddQuantity.keyset().Size()>0 && ps.orderitemcode != null && MaptoAddQuantity.keyset().contains(ps.orderitemcode)){
                                                        Integer existingQty = 0;
                                                        existingQty = MaptoAddQuantity.get(ps.orderitemcode);
                                                        if(asrl.eCommazon__Quantity__c != null)
                                                            existingQty += Integer.valueOf(ps.quantitypurchased);
                                                        MaptoAddQuantity.put(ps.orderitemcode,existingQty);
                                                    }
                                                    Else{
                                                        MaptoAddQuantity.put(ps.orderitemcode,Integer.valueOf(ps.quantitypurchased));
                                                    }
                                                }
                                                if(ol!=null && 'Order'.equals(ps.transactionType) ) {
                                                    Integer qtyBuild = 1;
                                                    if(ol.ECS__Grouped_Product__c != null && B2CIdAndQtyToBuild.get(ol.ECS__Grouped_Product__c) != null){
                                                        qtyBuild = B2CIdAndQtyToBuild.get(ol.ECS__Grouped_Product__c);
                                                    }
                                                    if(ps.orderitemcode != null && MaptoAddQuantity.get(ps.orderitemcode) != null)
                                                        ol.ECS__Quantity__c = MaptoAddQuantity.get(ps.orderitemcode)*qtyBuild;
                                                    else
                                                        ol.ECS__Quantity__c = asrl.eCommazon__Quantity__c*qtyBuild;
                                                }
                                                
                                                System.Debug('asrl.eCommazon__Quantity__c :'+asrl.eCommazon__Quantity__c);
                                               // System.Debug('ol.ECS__Quantity__c :'+ol.ECS__Quantity__c);
                                            }
                                            
                                            if(asrl.eCommazon__Item_Price__c==null) asrl.eCommazon__Item_Price__c = 0;
                                            asrl.eCommazon__Item_Price__c += ps.priceAmount;
                                                
                                            if(ol!=null && 'Order'.equals(ps.transactionType)) {
                                                if(orderLines.containsKey(ol.Id)) {
                                                    ol = orderLines.get(ol.Id);
                                                }
                                                
                                                ol.ECS__Unit_Price__c = asrl.eCommazon__Item_Price__c;
                                                if(ol.ECS__Quantity__c!=null && ol.ECS__Unit_Price__c!=null) ol.ECS__Order_Line_Total__c = ol.ECS__Quantity__c * ol.ECS__Unit_Price__c;
                                                orderLines.put(ol.Id, ol);
                                            }
                                        } else if('Tax'.equals(ps.priceType)) {
                                            if(asrl.Tax__c==null) asrl.Tax__c = 0;
                                            asrl.Tax__c += ps.priceAmount;
                                        } else if(!'Shipping'.equals(ps.priceType) && ('other-transaction'.equals(ps.transactionType) || 'ServiceFee'.equals(ps.transactionType))) {
                                            String uniqueIdStr = uniqueId = settlement.Name+'-'+ps.orderid+'-'+ps.priceType;
                                            if('other-transaction'.equals(ps.transactionType)) {
                                                Integer j=1;
                                                while(settlementLineMap.containsKey(uniqueIdStr)) {
                                                    uniqueIdStr = uniqueId+'-'+j++;
                                                    asrl = new Amazon_Settlement_Report_Line__c();
                                                    asrl.eCommazon__Amazon_Settlement_Report__c = settlement.Id;
                                                    asrl.Order__c = o.Id;
            
                                                    asrl.Name = ps.orderid;
                                                    if(ps.sku!=null && ps.sku!='') {
                                                        asrl.Name += '-'+ps.sku;
                                                        asrl.SKU__c = ps.sku;
                                                    }
                                                    
                                                    asrl.Name += '-'+ps.priceType;
                                                }
                                            }
                                            
                                            asrl.External_Id__c = uniqueIdStr;
                                             // settlerecordnotCreated.put(asrl.External_Id__c,String.ValueOf(o.Name));
                                                                                        
                                            String[] temp = ps.posteddate.split(' ');
                                            asrl.eCommazon__Posted_Date__c = DateTime.valueOf(temp[0]+' '+temp[1]);
        
                                            asrl.Type__c = asrl.eCommazon__Other_Description__c = ps.priceType;
                                            if('FBACustomerReturn'.equals(ps.priceType)) asrl.Type__c = 'Service Fee';
                                            
                                            if('ServiceFee'.equals(ps.transactionType.Trim())) {
                                                 asrl.Type__c = 'Service Fee';
                                                 asrl.eCommazon__Other_Description__c = 'FBACustomerReturn';
                                                 asrl.External_Id__c = settlement.Name.Trim()+'-'+ps.orderid.Trim()+'-'+asrl.eCommazon__Other_Description__c;
                                                
                                                 if(MaptoAddAmount.Get(asrl.External_Id__c)!=Null) {
                                                     if(ps.priceAmount !=Null) asrl.eCommazon__Other_Amount__c = MaptoAddAmount.get(asrl.External_Id__c)+ps.priceAmount; 
                                                     else asrl.eCommazon__Other_Amount__c = MaptoAddAmount.get(asrl.External_Id__c)+0;
                                                 } else {
                                                    if(ps.priceAmount !=Null) asrl.eCommazon__Other_Amount__c =ps.priceAmount; 
                                                    else asrl.eCommazon__Other_Amount__c =0;
                                                 }
                                                     
                                                 System.Debug('**asrl.External_Id__c**'+asrl.External_Id__c);  
                                                 MaptoAddAmount.Put(asrl.External_Id__c,asrl.eCommazon__Other_Amount__c);
                                         
                                            }
                                          
                                          if(!'ServiceFee'.equals(ps.transactionType)) {
                                             if(asrl.eCommazon__Other_Amount__c==null) asrl.eCommazon__Other_Amount__c = 0;
                                             asrl.eCommazon__Other_Amount__c += ps.priceAmount;
                                          }
                                            
                                        } else if('Shipping'.equals(ps.priceType)) {
                                            if('ItemPrice'.equals(ps.amountType)) {
                                                if(asrl.eCommazon__Shipping__c==null) asrl.eCommazon__Shipping__c = 0;
                                                asrl.eCommazon__Shipping__c += ps.priceAmount;
                                            } else {
                                                if(asrl.eCommazon__Shipping_Promotion__c==null) asrl.eCommazon__Shipping_Promotion__c = 0;
                                                asrl.eCommazon__Shipping_Promotion__c += ps.priceAmount;
                                            }
                                        } else {
                                            String[] temp = ps.posteddate.split('\\+');
                                            asrl.eCommazon__Posted_Date__c = DateTime.valueOf(temp[0].replace('T', ' '));             
                                            
                                            if(asrl.eCommazon__Other_Amount__c==null) asrl.eCommazon__Other_Amount__c = 0;
                                            if(ps.priceAmount!=null) asrl.eCommazon__Other_Amount__c += ps.priceAmount;
                                            if(asrl.eCommazon__Other_Description__c==null) asrl.eCommazon__Other_Description__c = '';
                                            if(ps.priceType!=null) asrl.eCommazon__Other_Description__c += ps.priceType;
                                        }
                                        
                                        //if('Shipping'.equals(ps.promotionType)) {
                                        //  asrl.eCommazon__Shipping_Chargeback__c = ps.promotionAmount;
                                        //}
                                        
                                    settlementLineMap.put(asrl.External_Id__c, asrl);
                                    System.Debug('settlementLineMap :'+settlementLineMap.Values());
                               
        
                            } else {
                                System.debug('order '+ps.orderid+' is null!');
                                Amazon_Queue__c aq = new Amazon_Queue__c();
                                if(ps.orderid != null && !ps.orderid.Contains('Error') && !ps.orderid.Contains('ErrorResponse') && !ps.orderid.Contains('<') && !ps.orderid.Contains('>')){
                                    aq.eCommazon__Amazon_Setting__c = setting.Id;
                                    aq.eCommazon__Identifier__c = ps.orderid;
                                    aq.eCommazon__Status__c = 'Pending';
                                    aq.eCommazon__Type__c = 'Order';   
                                }                     
                                if(!queueList.containsKey(aq.eCommazon__Identifier__c)) queueList.put(aq.eCommazon__Identifier__c, aq);
                                if(queueList.Values().size()>0){
                                   For(Amazon_Queue__c AmazQue : queueList.Values()){
                                     orderNmbrAmazonque.Add(AmazQue.eCommazon__Identifier__c);
                                 }
                               }
                               System.debug('***orderNmbrAmazonque***'+orderNmbrAmazonque);
                                
                                System.Debug('ps : '+ps);
                                String Error = 'Amazon Settlement Record Not Create:\n : Settlement detail is : '+ps;
                                ECS__Log__c logRecord = New ECS__Log__c();
                                logRecord.ECS__Log_Name__c='Payment Settlement Report';
                                logRecord.ECS__Log_Detail__c=Error;
                                logRecord.eCommazon__Amazon_Report__c = settlement.eCommazon__Amazon_Report__c;
                                logListForSettlement.add(logRecord);
                                System.debug('***logRecord***'+logRecord);
                            }
                        
                       
                    }
                    catch(Exception e){
                        String Error = 'Amazon Settlement Record Not Create:\n : Settlement detail is : '+ps;
                        ECS__Log__c logRecord = New ECS__Log__c();
                        logRecord.ECS__Log_Name__c='Payment Settlement Report';
                        logRecord.ECS__Log_Detail__c=Error;
                        logRecord.eCommazon__Amazon_Report__c = settlement.eCommazon__Amazon_Report__c;
                        logListForSettlement.add(logRecord);
                        System.debug('***logRecord***'+logRecord);
                    }
               }
                    
                    if(logListForSettlement.Size() > 0) {
                        Insert logListForSettlement;
                    }
                    if(queueList.size()>0) {
                        r = ECS.Util.handleUpsertResult(Database.upsert(queueList.values(), Amazon_Queue__c.eCommazon__Identifier__c, false));
                        System.debug('amazonQueueResult='+r);
                    }
                    
                    if(settlementLineMap.size()>0) {
                        r = ECS.Util.handleUpsertResult(Database.upsert(settlementLineMap.values(), Amazon_Settlement_Report_Line__c.External_Id__c, false));
                        System.debug('settlementReportLinesResult='+r);
                    }
                    
                    if(txnMap.size()>0) {
                        try{
                             r = ECS.Util.handleUpsertResult(Database.upsert(txnMap.values(),eCommazon__Amazon_Settlement_Report_Transaction__c.External_Id__c, false));
                            System.debug('transactionsResult='+r);
                        }
                        catch(Exception e){
                            System.Debug('eCommazon__Amazon_Settlement_Report_Transaction__c Error : '+e);
                        }
                       
                    }
                    
                    Map<String, Amazon_Settlement_Report_Line__c> settlementMap = new Map<String,Amazon_Settlement_Report_Line__c>();
                    for(Amazon_Settlement_Report_Line__c srl : [Select Id, External_Id__c From Amazon_Settlement_Report_Line__c where External_Id__c IN:settlementLineMap.keySet()]) {
                        settlementMap.put(srl.External_Id__c, srl);
                    } 
                    
                    Map<String, Amazon_Settlement_Report_Line__c> settlementMapcreated = new Map<String,Amazon_Settlement_Report_Line__c>();
                    for(Amazon_Settlement_Report_Line__c srl : [Select Id, External_Id__c From Amazon_Settlement_Report_Line__c where External_Id__c IN:reportNotbcaz]) {
                        settlementMapcreated.put(srl.External_Id__c.Trim(), srl);
                    }
                 
                      String ErrorMesg='';
                      Set<String> Settlmenorderid = New Set<String>(); 
                      List<ECS__Log__c>  ListLog = New  List<ECS__Log__c>();
                      
                      if(reportNotbcaz.Size()>0)
                       {
                        for(String S : reportNotbcaz){
                            if(!settlementMapcreated.Keyset().Contains(S)){
                              Settlmenorderid.add(S);
                              String Error = 'Amazon Settlement Record Not Create:\nAmazon Order # :'+S;
                              ECS__Log__c logRecord = New ECS__Log__c();
                              logRecord.ECS__Log_Name__c='Payment Settlement Report';
                              logRecord.ECS__Log_Detail__c=Error;
                              logRecord.eCommazon__Amazon_Report__c = settlement.eCommazon__Amazon_Report__c;
                              ListLog.add(logRecord);
                            }
                       }
                        if(Settlmenorderid.Size()>0)
                           ErrorMesg='Settlement Report Line(s) Below Have Not Been Created \nError Message: Order Not Found on Salesforce.\nRelated to:'+Settlmenorderid;
                      }
                      
                     if(orderNmbrAmazonque.Size()>0) {
                         ErrorMesg=ErrorMesg+'\nError Message: Orders Not Found on Salesforce. Amazon Queue Record Created\nRelated to:'+orderNmbrAmazonque; 
                     }
                     
                     if(ListLog.Size() > 0){
                        Update ListLog;
                     }
                     if(ErrorMesg !=Null && ErrorMesg !=''){
                         ECS__Log__c logRecord = New ECS__Log__c();
                         logRecord.ECS__Log_Name__c='Payment Settlement Report';
                         logRecord.ECS__Log_Detail__c=ErrorMesg;
                         logRecord.eCommazon__Amazon_Report__c = settlement.eCommazon__Amazon_Report__c;
                         
                       Insert logRecord;
                       System.Debug('***logRecord***'+logRecord);
                     }
     
                    if(orderLines.size()>0) {
                        Map<String,ECS__eCommSource_Order_Line__c> orderLinesToUpdate = new Map<String,ECS__eCommSource_Order_Line__c>();
                        for(ECS__eCommSource_Order_Line__c ol : orderLines.values()) {
                            String uniqueId = orderLineUniqueIdMap.get(ol.Id);
                            ol.eCommazon__Amazon_Settlement_Report_Line__c = settlementMap.get(uniqueId).Id;
                            if(!orderLinesToUpdate.containsKey(ol.Id)) orderLinesToUpdate.put(ol.Id, ol);
                        }
                        
                        if(orderLinesToUpdate.size()>0) {
                            update orderLinesToUpdate.values();
                            numProcessed = settlementLineMap.size() + txnMap.size();
                        }
                    }
                
            } catch(Exception e) {
                Util.logException(e, 'Payment Settlement Report',settlement.eCommazon__Amazon_Report__c);
                System.debug('exception='+e+' cause='+e.getCause()+' message='+e.getMessage()+' stackTrace='+e.getStackTraceString());
            }
            
        return numProcessed;
    }
    
    public class InboundShipmentItemsResponse {
        
        public CC_XmlDOM response {get; set;}
        
        public InboundShipmentItemsResponse(CC_XmlDOM node) {
            response = node;
            processResponse();
        }
        
        public void processResponse() {
                    CC_XmlNode itemArray = response.root.GetElementByTagName('ListInboundShipmentItemsResponse');
                    if(itemArray!=null) {
                        List<CC_XmlNode> items = itemArray.GetElementsByTagName('member');
                        //Integer i = 0;
                        List<FBA_Shipment_Item__c> siList = new List<FBA_Shipment_Item__c>();
                        for(CC_XmlNode i : items) {
                            //System.debug(LoggingLevel.WARN, 'i is equal to:' + i);
                            if(i!=null) {
                                FBA_Shipment_Item__c si = new FBA_Shipment_Item__c();
                                si.FBA_Shipment__c = 'a0mA0000001xWn8';
                                si.Name = i.getElementByTagName('SellerSKU').nodeValue;
                                si.FNSKU__c = i.getElementByTagName('FulfillmentNetworkSKU').nodeValue;
                                si.External_Id__c = 'FBA1LX7Q4C'+'-'+si.FNSKU__c;
                                siList.add(si);
                            }
                        }
                        handleUpsertResult(Database.upsert(siList, FBA_Shipment_Item__c.External_Id__c, false));
                    }
        }
    }
    
 /*  //Code Started by Devesh............
   Public void ListAllFulfillmentOrders(){
    Amazon_Setting__c azs = new Amazon_Setting__c();
                         azs =  [SELECT Id, Merchant_ID__c
                                    FROM Amazon_Setting__c
                                    Where Enabled__c=true order by Createddate Desc Limit:1];
                    
       AmazonService aserv = new AmazonService(azs.eCommazon__Merchant_ID__c);
       // String response = aserv.getListAllFulfillmentOrders();
       String  response  = aserv.fba('ListAllFulfillmentOrders',null);
        System.Debug('**response**'+response);
  }
  
  //Code ended............*/
    
/*

<?xml version="1.0"?>
<ListOrdersResponse xmlns="https://mws.amazonservices.com/Orders/2013-09-01">
<ListOrdersResult>
<LastUpdatedBefore>2014-06-03T13:58:10Z</LastUpdatedBefore>
<Orders>
<Order>
<ShipmentServiceLevelCategory>SecondDay</ShipmentServiceLevelCategory>
<ShipServiceLevel>SecondDay</ShipServiceLevel>
<LatestShipDate>2014-06-04T07:00:00Z</LatestShipDate>
<MarketplaceId>ATVPDKIKX0DER</MarketplaceId>
<SalesChannel>Amazon.com</SalesChannel>
<OrderType>StandardOrder</OrderType>
<SellerOrderId>002-5246078-9957043</SellerOrderId>
<FulfillmentChannel>AFN</FulfillmentChannel>
<OrderStatus>Pending</OrderStatus>
<LastUpdateDate>2014-06-03T13:46:28Z</LastUpdateDate>
<EarliestShipDate>2014-06-04T07:00:00Z</EarliestShipDate>
<PurchaseDate>2014-06-03T13:46:26Z</PurchaseDate>
<NumberOfItemsUnshipped>1</NumberOfItemsUnshipped>
<NumberOfItemsShipped>0</NumberOfItemsShipped>
<AmazonOrderId>002-5246078-9957043</AmazonOrderId>
<PaymentMethod>Other</PaymentMethod>
</Order>
<Order>
<ShipmentServiceLevelCategory>SecondDay</ShipmentServiceLevelCategory>
<ShipServiceLevel>SecondDay</ShipServiceLevel>
<LatestShipDate>2014-06-04T07:00:00Z</LatestShipDate>
<MarketplaceId>ATVPDKIKX0DER</MarketplaceId>
<SalesChannel>Amazon.com</SalesChannel>
<OrderType>StandardOrder</OrderType>
<SellerOrderId>115-0345575-0998639</SellerOrderId>
<FulfillmentChannel>AFN</FulfillmentChannel>
<OrderStatus>Pending</OrderStatus>
<LastUpdateDate>2014-06-03T13:52:20Z</LastUpdateDate>
<EarliestShipDate>2014-06-04T07:00:00Z</EarliestShipDate>
<PurchaseDate>2014-06-03T13:52:19Z</PurchaseDate>
<NumberOfItemsUnshipped>1</NumberOfItemsUnshipped>
<NumberOfItemsShipped>0</NumberOfItemsShipped>
<AmazonOrderId>115-0345575-0998639</AmazonOrderId>
<PaymentMethod>Other</PaymentMethod>
</Order>
<Order>
<ShipmentServiceLevelCategory>SecondDay</ShipmentServiceLevelCategory>
<ShipServiceLevel>SecondDay</ShipServiceLevel>
<LatestShipDate>2014-06-04T01:00:00Z</LatestShipDate>
<MarketplaceId>ATVPDKIKX0DER</MarketplaceId>
<SalesChannel>Amazon.com</SalesChannel>
<OrderType>StandardOrder</OrderType>
<SellerOrderId>115-6170478-2070634</SellerOrderId>
<FulfillmentChannel>AFN</FulfillmentChannel>
<OrderStatus>Pending</OrderStatus>
<LastUpdateDate>2014-06-03T13:54:02Z</LastUpdateDate>
<EarliestShipDate>2014-06-04T01:00:00Z</EarliestShipDate>
<PurchaseDate>2014-06-03T13:53:59Z</PurchaseDate>
<NumberOfItemsUnshipped>1</NumberOfItemsUnshipped>
<NumberOfItemsShipped>0</NumberOfItemsShipped>
<AmazonOrderId>115-6170478-2070634</AmazonOrderId>
<PaymentMethod>Other</PaymentMethod>
</Order>
<Order>
<ShipmentServiceLevelCategory>Standard</ShipmentServiceLevelCategory>
<ShipServiceLevel>Standard</ShipServiceLevel>
<LatestShipDate>2014-06-10T06:59:59Z</LatestShipDate>
<MarketplaceId>ATVPDKIKX0DER</MarketplaceId>
<SalesChannel>Amazon.com</SalesChannel>
<OrderType>StandardOrder</OrderType>
<SellerOrderId>114-4914627-3113851</SellerOrderId>
<FulfillmentChannel>AFN</FulfillmentChannel>
<OrderStatus>Pending</OrderStatus>
<LastUpdateDate>2014-06-03T13:54:11Z</LastUpdateDate>
<EarliestShipDate>2014-06-10T06:59:59Z</EarliestShipDate>
<PurchaseDate>2014-06-03T13:54:10Z</PurchaseDate>
<NumberOfItemsUnshipped>4</NumberOfItemsUnshipped>
<NumberOfItemsShipped>0</NumberOfItemsShipped>
<AmazonOrderId>114-4914627-3113851</AmazonOrderId>
<PaymentMethod>Other</PaymentMethod>
</Order>
</Orders>
</ListOrdersResult>
<ResponseMetadata>
<RequestId>3507cea6-8a04-4beb-9253-914a0c76e1dd</RequestId>
</ResponseMetadata>
</ListOrdersResponse>    

*/


}